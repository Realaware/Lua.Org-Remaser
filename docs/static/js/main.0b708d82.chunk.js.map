{"version":3,"sources":["routes/ReadyStage.tsx","component/InfoText.tsx","routes/Recommend.tsx","library/Typical.ts","library/CreateThread.tsx","routes/Home.tsx","component/Syntax.tsx","routes/Basic/index.tsx","component/WarningText.tsx","component/LinkButton.tsx","routes/String/index.tsx","routes/Table/index.tsx","interface/Tree.tsx","component/Sidebar.tsx","component/Button.tsx","component/Container.tsx","component/SmallText.tsx","component/Divider.tsx","component/Topbar.tsx","App.tsx","index.tsx"],"names":["ReadyStage","Divider","Direction","margin","href","WarningText","style","marginTop","LinkButton","path","Component","InfoText","children","className","Recommend","Typical","config","onUpdate","text","duration","length","timeForPerText","Math","floor","i","setTimeout","substring","CreateThread","title","Home","state","EditorText","setState","Syntax","this","language","vs2015","showLineNumbers","Basic","name","component","border","padding","colSpan","withRouter","history","onClick","replace","Patterns","split","forEach","s","sp","push","desc","String","map","data","index","lineHeight","Table","Tree","Introduction","Function","Metatable","Debug","Sidebar","Object","keys","key","id","cursor","props","TreeData","TreeItemDiv","Data","current","list","document","getElementById","height","scrollHeight","overflow","UpdateList","Button","color","Ripple","createRipples","during","Container","SmallText","Topbar","width","window","innerWidth","SideActive","addEventListener","RemappedTree","App","exact","AOS","init","once","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0b708d82.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, SmallText, Divider, LinkButton, WarningText } from \"../component\";\r\n\r\nclass ReadyStage extends Component {\r\n   render() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               시작하기 앞서\r\n            </h2>\r\n            <Divider Direction='horizontal' margin />\r\n            <SmallText>\r\n               Lua.Org 리마스터는 루아를 빠르고 쉽게 이해 할 수 있는 사이트입니다 !<br/>\r\n               이 사이트는 Lua U와 바닐라 루아를 같이 다루고 있습니다.<br/>\r\n               완전 바닐라 루아를 배우고 싶으시다면 <a href='https://lua.org'>여기로 가주세요</a><br/>\r\n               <WarningText>\r\n                  Lua U에 없는 기능은 여기서 다루지 않습니다.\r\n               </WarningText>\r\n            </SmallText>\r\n            <h2>\r\n               시작하기 앞서...\r\n            </h2>\r\n            <SmallText>\r\n               궁금한점이나 추가했으면 하는 점은 제 개인 디스코드 something good#6611로 연락주세요 !\r\n            </SmallText>\r\n            <div style={{marginTop: '15px'}}>\r\n\r\n            </div>\r\n            <LinkButton path='/introduction/recommend'>\r\n               모든 준비가 됐다면 눌러주세요 ! \r\n            </LinkButton>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default ReadyStage;","function InfoText({children}: {children: any}) {\r\n   return <span className='lua-info'>\r\n      {children}\r\n   </span>\r\n}\r\n\r\nexport default InfoText;","import React, { Component } from \"react\";\r\nimport { Container, SmallText, Divider, LinkButton } from \"../component\";\r\nimport InfoText from \"../component/InfoText\";\r\n\r\nclass Recommend extends Component {\r\n   render() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               진짜로 시작하기 앞서...\r\n            </h2>\r\n            <Divider margin Direction='horizontal' />\r\n            <SmallText>\r\n               여러분들의 실력을 먼저 확인하고 자신이 무엇부터 시작할지 골라주세요.\r\n            </SmallText>\r\n\r\n            <div className='lua-rows'>\r\n               <LinkButton path='/basic/orientation'>\r\n                  <SmallText>\r\n                     초급자\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Basic</InfoText>\r\n               </LinkButton>\r\n               <LinkButton path='/table/orientation'>\r\n                  <SmallText>\r\n                     중급자\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Table</InfoText>\r\n               </LinkButton>\r\n               <LinkButton path='/debug/orientation'>\r\n                  <SmallText>\r\n                     고수\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Debug</InfoText>\r\n               </LinkButton>\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Recommend;","interface TypicalInterface {\r\n   text: string,\r\n   duration?: number\r\n}\r\n\r\n/**\r\n * \r\n * @param config \r\n * @param onUpdate \r\n * \r\n * duration will be counted as ms\r\n */\r\n\r\nfunction Typical(config: TypicalInterface, onUpdate: Function) {\r\n   var { text, duration } = config;\r\n\r\n   if (!duration) duration = 1000;\r\n   if (typeof(text) !== 'string') return;\r\n\r\n   const length = text.length;\r\n   const timeForPerText = Math.floor(duration / length);\r\n\r\n   for (let i = 0; i<length; i++) {\r\n      setTimeout(() => {\r\n         onUpdate(text.substring(0, i + 1));\r\n      }, i * timeForPerText);\r\n   }\r\n   \r\n}\r\n\r\nexport default Typical;","import React, { Component } from \"react\";\r\nimport { Container, Divider } from \"../component\";\r\n\r\n\r\nfunction CreateThread({children, title}: {\r\n   children: any,\r\n   title: string\r\n}) {\r\n   \r\n   return function() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               {title}\r\n            </h2>\r\n            <Divider margin Direction='horizontal' />\r\n            {children}\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default CreateThread;","import React, { Component } from 'react';\r\nimport { Container, Syntax, SmallText, Divider, LinkButton } from \"../component\";\r\nimport { Typical } from '../library';\r\n\r\nconst Script =\r\n`-- being pro hacker\r\nlocal gameMt = getrawmetatable(game);\r\nlocal oldMt = gameMt.__namecall;\r\n\r\nsetreadonly(gameMt, false);\r\n\r\ngameMt.__namecall = newcclosure(function(self, ...)\r\n   local method = getnamecallmethod();\r\n\r\n   if (tostring(method) == 'Kick') then\r\n      return wait(9e9);\r\n   end\r\n\r\n   return oldMt(self, ...);\r\nend)\r\n\r\nsetreadonly(gameMt, true);\r\n\r\n-- nice.`\r\n\r\nclass Home extends Component {\r\n   state = {\r\n      EditorText: ''\r\n   }\r\n\r\n   componentDidMount() {\r\n      const callback = (EditorText: string) => {\r\n         this.setState({\r\n            EditorText\r\n         });\r\n      }\r\n\r\n      Typical({\r\n         text: Script,\r\n         duration: 20000\r\n      }, callback);\r\n   }\r\n\r\n   render() {\r\n      \r\n      return (\r\n         <Container>\r\n            <h2>\r\n               Lua.Org 리마스터에 방문해주셔서 감사합니다 !\r\n            </h2>\r\n            <div className='lua-column'>\r\n               <div className='lua-card fullwidth'>\r\n                  <h3>\r\n                     Lua.Org Remaster는\r\n                  </h3>\r\n                  <SmallText>\r\n                     여러분들이 루아를 조금 더 쉽고 간편하게 배울 수 있도록 해주는 사이트 입니다 !\r\n                  </SmallText>\r\n               </div>\r\n               <div className='lua-card fullwidth'>\r\n                  <h3>\r\n                     크레딧 및 사용된 라이브러리\r\n                  </h3>\r\n                  <ul>\r\n                     <li>\r\n                        something good#6611\r\n                     </li>\r\n                  </ul>\r\n                  <Divider Direction='horizontal' />\r\n                  <ul>\r\n                     <li>ReactJS</li>\r\n                     <li>AOS</li>\r\n                     <li>react-syntax-highligter</li>\r\n                     <li>react-ripples</li>\r\n                  </ul>\r\n               </div>\r\n               <div className='lua-card fullwidth'>\r\n                  <Syntax>\r\n                     {this.state.EditorText}\r\n                  </Syntax>\r\n                  <LinkButton path='/introduction/ready_stage'>\r\n                     시작하기\r\n                  </LinkButton>\r\n               </div>\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Home;","// Credit: https://github.com/react-syntax-highlighter/react-syntax-highlighter\r\n\r\nimport React from \"react\";\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { vs2015 } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nfunction Syntax({children}: {children?: any}) {\r\n   return (\r\n      <SyntaxHighlighter language=\"lua\" style={vs2015} showLineNumbers>\r\n         {children || ''}\r\n      </SyntaxHighlighter>\r\n   )\r\n}\r\n\r\nexport { Syntax };","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\n\r\n// unknown error keep bothering me.\r\nimport { Syntax } from \"../../component/Syntax\";\r\n\r\nconst FunctionEx =\r\n`function 함수명(name)\r\n   print(name);\r\nend -- 함수는 end를 이용해 항상 닫아줘야함.\r\n함수명('Real') -- 예상값: Real`;\r\nconst AnonymousFunctionEx =\r\n`function Entershop(name)\r\n   return function()\r\n      print(name .. \"'ve bought a water\");\r\n   end\r\nend\r\n\r\nlocal BuyItem = Entershop('Real');\r\n`;\r\nconst RecursionEx = \r\n`local count = 0;\r\nfunction addCount()\r\n   if (count == 10) then\r\n      return;\r\n   end\r\n   count = count + 1;\r\n   addCount();\r\nend\r\n\r\naddCount();\r\n`;\r\n\r\nexport const Basic: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/basic/orientation',\r\n      component: CreateThread({\r\n         title: '루아 베이직 첫번째 글에 오신걸 환영합니다 👏', children: <span>\r\n         이 섹션에서는 루아의 기본 기능들을 배울겁니다 ! <br/>\r\n         여기서 배우는 기능들의 조금 더 새부적인것은 각 섹션에 가시면 됩니다 ! <br/>\r\n         모바일이면 위쪽의 버튼을 눌러 사이드바를 열고 직접 원하는 글을 선택해주세요.\r\n         </span>\r\n      })\r\n   },\r\n   {\r\n      name: 'String',\r\n      path: '/basic/string',\r\n      component: CreateThread(\r\n         {\r\n            title: 'String',\r\n            children: <>\r\n               문자열은 모든 프로그래밍의 기본이 되는 요소입니다. \r\n\r\n               사실상 숫자 이외의 모든 글자들은 문자열이라고 생각하시면 됩니다.\r\n               <Syntax>\r\n                  {\"local Myname = 'Real'; -- 문자열\\nlocal Myage = 20; -- 숫자\\n\\nprint(type(Myname)) -- 예상값: String\"}\r\n               </Syntax>\r\n               문자열은 ' 또는 \" 을 사용하여 사용이 가능합니다.\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Table',\r\n      path: '/basic/table',\r\n      component: CreateThread(\r\n         {\r\n            title: 'Table',\r\n            children: <>\r\n               테이블은 여러 데이터의 집합입니다.\r\n               테이블을 통해 다양한 데이터를 저장 할 수 있습니다.\r\n               <br/>\r\n               테이블은 앞으로 루아를 하면서 많이 사용 할 기능이기 때문에 기초를 확실하게 해두셔야 합니다.\r\n               <Syntax>\r\n                  {\"local Mytable = {} -- 테이블 정의\\n table.insert(Mytable, 'Real') -- table.insert를 통해 테이블에 데이터 저장.\"}\r\n               </Syntax>\r\n\r\n               테이블을 프린트 했을때 우리는 아래처럼\r\n               <Syntax>\r\n                  table: 0x00000006\r\n               </Syntax>\r\n               테이블이 할당받은 메모리 값이 출력됩니다. 이걸 이용하면 굳이 테이블 안의 내용물을 확인하지 않아도 두 테이블이 같은지 확인 할 수 있습니다.<br/>\r\n               우리는 테이블[인덱스] 를 이용해 값을 얻을 수 있습니다.\r\n               <Syntax>\r\n                  {\"Mytable[1] -- 예상값: Real\"}\r\n               </Syntax>\r\n               여기서 1은 테이블에서 이 값의 순서를 나타냅니다.<br />\r\n               보통 다른 언어들은 인덱스가 0부터 시작하지만 루아는 1부터 시작합니다.<br/>\r\n               우리가 인덱스를 따로 지정하지 않는다면 값은 자동적으로 숫자를 할당받지만 우리가 직접 인덱스를 설정하면 그 값이 할당됩니다.<br/>\r\n               여기선 문자열, 숫자 둘 다 가능합니다\r\n               <Syntax>\r\n                  {\"local Mytable = {\\n   Myname = 'Real'\\n};\\n print(Mytable.Myname) -- 예상값: Real\"}\r\n               </Syntax>\r\n\r\n\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Operator',\r\n      path: '/basic/operator',\r\n      component: CreateThread(\r\n         {\r\n            title: 'Operator',\r\n            children: <>\r\n               오퍼레이터는 {\"< > <= >= ==\"} 등을 의미합니다.\r\n               \r\n               여기서 {\"< > <= >= \"} 등은 숫자나 테이블에만 사용 가능합니다 <br/>\r\n               테이블의 경우는 나중에 조금 더 심화적으로 배울겁니다. 지금은 숫자만 알아두세요.\r\n\r\n               <Syntax>\r\n                  {\"local FirstNumber = 1;\\nlocal SecondNumber = 2;\\nprint(FirstNumber == SecondNumber) -- 예상값: False\\nprint(FirstNumber < SecondNumber) -- 예상값: True\"}\r\n               </Syntax>\r\n\r\n               <table style={{border: '1px solid rgb(50, 50, 50)', padding: '10px'}}>\r\n                  <thead>\r\n                     <tr>\r\n                        <th>이름</th>\r\n                        <th colSpan={2}>의미</th>\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <tr><td>{\">\"}</td><td>앞에있는 수가 뒤에있는 수보다 큼</td></tr>\r\n                     <tr><td>{\"<\"}</td><td>앞에있는 수가 뒤에있는 수보다 작음</td></tr>\r\n                     <tr><td>{\">=\"}</td><td>앞에있는 수가 뒤에있는 수보다 크거나 같음</td></tr>\r\n                     <tr><td>{\"<=\"}</td><td>앞에있는 수가 뒤에있는 수보다 작거나 같음</td></tr>\r\n                     <tr><td>{\"==\"}</td><td>두 개의 숫자가 같음</td></tr>\r\n                     <tr><td>{\"#\"}</td><td>문자열, 테이블의 길이를 알려줌</td></tr>\r\n                  </tbody>\r\n               </table>\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Function',\r\n      path: '/basic/function',\r\n      component: CreateThread({\r\n         title: 'Function',\r\n         children: <>\r\n            함수는 여러분들이 코딩을 하는데 있어서 매우 중요한 부분입니다.<br/>\r\n            함수를 이용하면 복잡한 작업도 미리 적어둔 함수만 부르면 쉽게 이용 할 수 있습니다. <br/>\r\n\r\n            <Syntax>\r\n               {FunctionEx}\r\n            </Syntax>\r\n\r\n            함수의 종류에는 여러가지가 있습니다.<br/>\r\n            그 중 우리는 익명 함수와 재귀 함수를 알아볼겁니다.<br/>\r\n\r\n            먼저 익명 함수는 말 그대로 함수 이름이 없는 함수를 말합니다.\r\n            익명 함수를 만드는 방법은\r\n            <Syntax>\r\n               {AnonymousFunctionEx}\r\n            </Syntax>\r\n            이런식으로 만드실 수 있습니다. <br/>\r\n            <br/>\r\n            재귀 함수는 결과 값이 참이 될때까지 스스로를 계속 호출하는 함수를 말합니다. <br/>\r\n            함수의 장점을 이용한것이 재귀 함수입니다. 에를 들어\r\n            <Syntax>\r\n               {RecursionEx}\r\n            </Syntax>\r\n            이때 addCount 라는 함수는 count가 10이 될때까지 계속 반복합니다.\r\n         </>\r\n      })\r\n   }\r\n]","import React from \"react\";\r\n\r\nfunction WarningText({children}: {children: any}) {\r\n   return <span className='lua-warning'>\r\n      {children}\r\n   </span> \r\n}\r\n\r\nexport { WarningText };","import { Button } from '.';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\ninterface LinkProps extends RouteComponentProps {\r\n   path: string, children?: any\r\n}\r\n\r\nfunction _Link({path, children, history}: LinkProps) {\r\n   return <Button onClick={() => {\r\n      history.replace(path);\r\n   }}>\r\n      {children}\r\n   </Button>\r\n}\r\n\r\nconst LinkButton = withRouter(_Link);\r\n\r\nexport { LinkButton };","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport { Syntax } from \"../../component/Syntax\";\r\n\r\n// unknown error keep bothering me.\r\nimport InfoText from \"../../component/InfoText\";\r\nimport { WarningText } from \"../../component/WarningText\";\r\nimport { LinkButton } from '../../component/LinkButton';\r\n\r\nconst ByteEx = \r\n`local MyString = 'what is byte?';\r\nprint(string.byte(MyString, 1, #MyString)); -- 예상값: 119 104 97 116 32 105 115 32 98 121 116 101 63\r\nprint('\\\\119\\\\104\\\\97\\\\116\\\\32\\\\105\\\\115\\\\32\\\\98\\\\121\\\\116\\\\101\\\\63') -- 예상값: what is byte?`;\r\nconst CharEx = \r\n`print(string.char(97)) -- 예상값: a`;\r\nconst FindEx =\r\n`local MyString = \"Hello World\";\r\nprint(string.find(MyString, 'World')); -- 예상값: 7 11`;\r\nconst FormatEx =\r\n`local Myname = 'Real';\r\nlocal Formatted = string.format('Welcome, %q', Myname);\r\nprint(Formatted) -- 예상값: Welcome, Real`;\r\nconst PatternString = `x: (x가 이것들중 하나가 아닌 ^$()%.[]*+-?) x 스스로를 나타냄.\r\n.: 모든 문자\r\n%a: 모든 글자\r\n%c: 모든 제어 문자\r\n%d: 모든 숫자\r\n%g: 공백을 제외한 모든 프린트 가능한 문자\r\n%l: 모든 소문자 글자\r\n%p: 모든 구두 글자 (;,\",~ 등)\r\n%s: 모든 공백 글자\r\n%u: 모든 대문자 글자\r\n%w: 모든 알파벳 문자\r\n%x: 모든 16진수 숫자`;\r\n\r\nconst Patterns: Array<{name: string, desc: string}> = [];\r\n\r\nPatternString.split('\\n').forEach(s => {\r\n   const sp = s.split(':');\r\n   Patterns.push({name: sp[0], desc: sp[1]});\r\n})\r\nconst GmatchEx = \r\n`local Mystring = \"hello world from Lua\"\r\nfor w in string.gmatch(Mystring, \"%a+\") do -- %a는 모든 글자를 의미\r\n  print(w);\r\nend\r\n\r\n--   예상값:\r\n--   hellow\r\n--   world\r\n--   from\r\n--   Lua`;\r\nconst GsubEx =\r\n`x = string.gsub(\"hello world\", \"%w+\", \"%1 %1\")\r\n--> x=\"hello hello world world\"\r\n\r\nx = string.gsub(\"hello world\", \"%w+\", \"%0 %0\", 1)\r\n--> x=\"hello hello world\"\r\n\r\nx = string.gsub(\"hello world from Lua\", \"(%w+)%s*(%w+)\", \"%2 %1\")\r\n--> x=\"world hello Lua from\"\r\n\r\nx = string.gsub(\"4+5 = $return 4+5$\", \"%$(.-)%$\", function (s)\r\n      return loadstring(s)()\r\n    end)\r\n--> x=\"4+5 = 9\"\r\n\r\nlocal t = {name=\"lua\", version=\"5.4\"}\r\nx = string.gsub(\"$name-$version.tar.gz\", \"%$(%w+)\", t)\r\n--> x=\"lua-5.4.tar.gz\"`;\r\nconst LenEx = \r\n`print(string.len('Hello World')); -- 예상값: 11`;\r\nconst MatchEx =\r\n`x = string.match('hihihi123', 'hi120172067192');\r\nprint(x); -- 예상값: nil\r\n\r\nx = string.match('hihihi123', 'hi');\r\nprint(x); -- 예상값: hi`;\r\nconst RepEx =\r\n`x = string.rep('hi', 4);\r\nprint(x) -- 예상값: hihihihi`;\r\nconst ReverseEx = \r\n`print(string.reverse('! dlroW olleH')) -- 예상값: Hello World !`;\r\nconst SubEx =\r\n`x = 'Hello World'\r\nprint(string.sub(x, 5, #x)); -- 예상값: World`;\r\n\r\n\r\nexport const String: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/string/orientation',\r\n      component: CreateThread({\r\n         title: '베이직 레벨을 끝내셨군요 축하드립니다 🔥🔥', children: <>\r\n         이번엔 조금 더 심화적인 문자열을 배워봅시다. <br/>\r\n         시작하기 앞서 여러분들이 알아두면 좋은것이 있습니다.\r\n\r\n         <br/>\r\n\r\n         먼저 루아에 있는 여러가지 패턴들을 알아두셔야 합니다.\r\n\r\n         <table style={{border: '1px solid rgb(50, 50, 50)', padding: '10px'}}>\r\n            <thead>\r\n               <tr>\r\n                  <th>이름</th>\r\n                  <th colSpan={2}>의미</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {Patterns.map((data, index) => {\r\n                  return <tr key={`lua-patterns-${index}`}>\r\n                     <td>{data.name}</td>\r\n                     <td>{data.desc}</td>\r\n                  </tr>\r\n               })}\r\n            </tbody>\r\n         </table>\r\n         \r\n         저도 완벽하게 다 알진 못하지만 몇개는 알아두면 좋습니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Byte',\r\n      path: '/string/string_byte',\r\n      component: CreateThread(\r\n         {\r\n            title: 'String.Byte',\r\n            children: <>\r\n               <Syntax>\r\n                  String.Byte (s, [, i [, j]])\r\n               </Syntax>\r\n               이번엔 좀 멋진걸 배워봅시다. 누군가 보면 진짜 멋진 프로그래머라고 생각할 😄<br/>\r\n               String.Byte는 첫번째 인자에 오는 문자열을 바이트의 형태로 바꿔줍니다.\r\n               (바이트가 뭔지 모르신다면 찾아보세요.)<br/>\r\n               두번째와 세번째 인자에는 범위를 지정 할 수 있습니다.\r\n               지정하지 않는다면 첫번째 글자만 바이트화 시킵니다.\r\n               <Syntax>\r\n                  {ByteEx}\r\n               </Syntax>\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'String.Char',\r\n      path: '/string/string_char',\r\n      component: CreateThread({\r\n         title: 'String.Char',\r\n         children: <>\r\n            String.Char은 첫번째 인자에 상응하는 문자열을 리턴합니다.<br/>\r\n            예를 들어 \r\n            <Syntax>\r\n               {CharEx}\r\n            </Syntax>\r\n            라는 결과가 나옵니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Find',\r\n      path: '/string/string_find',\r\n      component: CreateThread({\r\n         title: 'String.Find',\r\n         children: <>\r\n            String.Find는 첫번째 인자에 받은 문자열에 두번째 인자에서 받은 문자열이 있는지 확인 할 수 있습니다.<br/>\r\n            만약 존재한다면 그 문자열의 인덱스를 알려주고 없다면 nil을 리턴합니다. <br />\r\n            <Syntax>\r\n               {FindEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Format',\r\n      path: '/string/string_format',\r\n      component: CreateThread({\r\n         title: 'String.Format',\r\n         children: <div className='lua-column'>\r\n            String.Format은 쉽게 문자열 안에 변수를 집어 넣을 수 있게 해줍니다.<br/>\r\n            자바스크립트나 C#에선 조금 더 간단하지만 루아에서는 이 기능을 써야합니다.<br/>\r\n            <Syntax>\r\n               {FormatEx}\r\n            </Syntax>\r\n            여기서 %q는 문자열, 숫자, 참/거짓을 전부 의미합니다.<br/>\r\n            <LinkButton path='/string/orientation'>패턴을 잘 모르면 <br/> <InfoText>시작으로 가기</InfoText> </LinkButton>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Gmatch',\r\n      path: '/string/string_gmatch',\r\n      component: CreateThread({\r\n         title: 'String.Gmatch',\r\n         children: <div>\r\n            <WarningText>String.Gmatch는 패턴을 잘 이해하셔야 제대로 사용 할 수 있습니다.</WarningText>\r\n            String.Gmatch는 반복 함수를 리턴하는데 한번 불려질때마다 첫번째 인자에 받은 문자열에서 패턴으로부터 얻은것을 리턴합니다. <br/>\r\n            3번째 인자에선 어디서부터 시작할지 정할 수 있으며 음수가 될 수 있습니다.\r\n            <Syntax>\r\n               {GmatchEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Gsub',\r\n      path: '/string/string_gsub',\r\n      component: CreateThread({\r\n         title: 'String.Gsub',\r\n         children: <div style={{lineHeight: '30px'}}>\r\n            <WarningText>String.Gsub 패턴을 잘 이해하셔야 제대로 사용 할 수 있습니다.</WarningText>\r\n            <InfoText>편의상 문자열은 s라고 하겠습니다.</InfoText> <br/>\r\n\r\n            string.gsub는 패턴의 모든 또는 주어진 네번째 인자 발생을 3번째 인자에서 주어진 값 - 문자열, 테이블, 함수가 될 수 있는 - 으로 바꾼것의 복사본을 리턴합니다. <br/>\r\n\r\n            만약 3번째 인자가 문자열이라면 이 값은 대체값으로 이용됩니다.<br/>\r\n            만약 3번째 인자가 테이블이라면 첫번째로 얻은 값을 테이블의 키로 사용합니다.<br/>\r\n            만약 3번째 인자가 함수라면 패턴에 맞는 값을 찾을때마다 함수를 부르고 첫번째 인자에 그 값을 보냅니다. <br/>\r\n\r\n            어떠한 경우든, 만약 패턴이 값을 찾지 못한다면 전체 패턴이 값에 있는것 처럼 행동합니다. <br/>\r\n            만약 값이 테이블이나 함수의 콜로 얻어진것이 문자열, 숫자이면 이것들은 대체값으로 사용됩니다. 반대로 만약 false 또는 nil 이라면 어떠한 대체값이 없는것으로 간주됩니다. <br/>\r\n            <InfoText>\r\n               설명 이해를 위해 예제를 봅시다.\r\n            </InfoText>\r\n            <Syntax>\r\n               {GsubEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Len',\r\n      path: '/string/string_len',\r\n      component: CreateThread({\r\n         title: 'String.Len',\r\n         children: <div>\r\n            설명할게 없습니다.\r\n            <Syntax>\r\n               {LenEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Lower',\r\n      path: '/string/string_lower',\r\n      component: CreateThread({\r\n         title: 'String.Lower',\r\n         children: <div>\r\n            첫번째 인자에서 받은 문자열을 소문자로 전부 바꿔줍니다.\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Match',\r\n      path: '/string/string_match',\r\n      component: CreateThread({\r\n         title: 'String.Match',\r\n         children: <div>\r\n            String.Match는 첫 번째 인자에서 받은 문자열에서 2번째 인자에서 받은 패턴에 맞는 첫번째 값을 리턴합니다.<br/>\r\n            만약 값을 찾으면 값을 리턴하고 그렇지 않다면 nil을 리턴합니다. <br/>\r\n            세 번째 인자에서는 시작 숫자를 쓸 수 있습니다. 기본은 1이며 음수가 될 수 있습니다.\r\n            <Syntax>\r\n               {MatchEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Rep',\r\n      path: '/string/string_rep',\r\n      component: CreateThread({\r\n         title: 'String.Rep',\r\n         children: <div>\r\n            String.Rep은 첫 번째 인자에서 받은 문자열을 두 번째 인자에서 받은 수 만큼 반복합니다.<br/>\r\n            만약 두 번째 인자가 양수가 아니면 빈 문자열을 리턴합니다.<br/>\r\n            <Syntax>\r\n               {RepEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Reverse',\r\n      path: '/string/string_reverse',\r\n      component: CreateThread({\r\n         title: 'String.Reverse',\r\n         children: <div>\r\n            String.Reverse는 첫 번째 인자에 주어진 문자열을 거꾸로 뒤집습니다.\r\n            <Syntax>\r\n               {ReverseEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Sub',\r\n      path: '/string/string_sub',\r\n      component: CreateThread({\r\n         title: 'String.Sub',\r\n         children: <div>\r\n            <InfoText>편의상 문자열은 s라고 하겠습니다.</InfoText> <br/>\r\n            String.Sub는 두 번째 인자에서 시작하는 s의 서브스트링을 리턴합니다. (세 번째 인자까지 계속하거나 정의되어 있지 않으면 끝까지 리턴합니다.)\r\n            <Syntax>\r\n               {SubEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Upper',\r\n      path: '/string/string_upper',\r\n      component: CreateThread({\r\n         title: 'String.Upper',\r\n         children: <div>\r\n            첫 번째 인자에 받은 문자열을 대문자로 바꿔 리턴합니다.\r\n         </div>\r\n      })\r\n   }\r\n]","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport { Syntax } from \"../../component/Syntax\";\r\n\r\n// unknown error keep bothering me.\r\nimport InfoText from \"../../component/InfoText\";\r\nimport { WarningText } from \"../../component/WarningText\";\r\nimport { LinkButton } from '../../component/LinkButton';\r\n\r\nconst ConcatEx =\r\n`local Mytable = {'Hello', 'World', '!'};\r\nprint(table.concat(Mytable, ' ')); -- 예상값: Hello World !`;\r\nconst InsertEx = \r\n`local Mytable = {'Hello', 'World'};\r\ntable.insert(Mytable, '!');\r\nprint(table.concat(Mytable, ' ')); -- 예상값: Hello World !`;\r\nconst MoveEx =\r\n`src = {\"a\", \"b\", \"c\", \"d\", \"e\"}\r\ndst = {\"v\", \"w\", \"x\", \"y\", \"z\"}\r\ntable.move(src, 2, 4, 1, dst)\r\nprint(table.concat(dst)) -- 예상값: bcdyz`;\r\nconst ForeachEx =\r\n`local Mytable = {'hi', 'hi2', 'hi3'};\r\ntable.foreach(Mytable, function(index, value)\r\n   print(index, value); -- 예상값: (각각) 1,2,3 hi,h2,h3\r\nend);`;\r\n\r\nexport const Table: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/v1/table/orientation',\r\n      component: CreateThread({\r\n         title: '드디어 테이블로 왔습니다 ! 짞짞짞 ',\r\n         children: <>\r\n            아직 많이 남긴 했지만, 열심히 가봅시다 \r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Concat',\r\n      path: '/table/table_concat',\r\n      component: CreateThread({\r\n         title: 'Table.Concat',\r\n         children: <>\r\n            Table.Concat은 첫 번째 인자에 받은 테이블의 모든 아이템 (문자열, 숫자) 등을 문자열로 리턴합니다. <br/>\r\n            <Syntax>\r\n               {ConcatEx}\r\n            </Syntax>\r\n\r\n            두 번째 인자에는 각 아이템 사이에 들어갈 문자를 정할 수 있습니다.<br/>\r\n            세 번째와 마지막 인자에는 각각 시작, 끝 위치를 정할 수 있고 마지막 인자가 테이블의 길이보다 길면 빈 문자를 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Insert',\r\n      path: '/table/table_insert',\r\n      component: CreateThread({\r\n         title: 'Table.Insert',\r\n         children: <>\r\n            Table.Insert는 첫 번째 인자에 타겟 테이블, 두 번째 인자에는 원하는 위치 또는 그냥 값을 넣을 수 있습니다. <br/>\r\n            <Syntax>\r\n               {InsertEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Move',\r\n      path: '/table/table_move',\r\n      component: CreateThread({\r\n         title: 'Table.Move',\r\n         children: <>\r\n            Table.Move는 첫 번째 인자에 테이블을 받습니다.<br/>\r\n            두 번째, 세 번째 인자에는 시작과 끝 위치를 받고 마지막 인자에는 대상으로 하는 테이블을 받습니다.\r\n            <Syntax>\r\n               {MoveEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Remove',\r\n      path: '/table/table_remove',\r\n      component: CreateThread({\r\n         title: 'Table.Remove',\r\n         children: <>\r\n            Table.Remove는 첫 번째 인자에서 받은 테이블의 두 번째 인자 위치의 아이템을 제거합니다.\r\n         </>   \r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Getn',\r\n      path: '/table/table_getn',\r\n      component: CreateThread({\r\n         title: 'Table.Getn',\r\n         children: <>\r\n            Table.Getn은 테이블을 통과한 아이템의 갯수를 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Clear',\r\n      path: '/table/table_clear',\r\n      component: CreateThread({\r\n         title: 'Table.Clear',\r\n         children: <>\r\n            Table.Clear은 테이블을 초기화합니다. (이 기능은 테이블을 지우는것이 아닌 테이블을 재사용 하도록 하기 위해 만들어진겁니다.)\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Find',\r\n      path: '/table/table_find',\r\n      component: CreateThread({\r\n         title: 'Table.Find',\r\n         children: <>\r\n            Table.Find는 첫 번째 인자에서 받은 테이블에서 두 번째 인자를 찾습니다. <br/>\r\n            만약 있다면 아이템의 인덱스, 없다면 nil을 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Foreach',\r\n      path: '/table/table_foreach',\r\n      component: CreateThread({\r\n         title: 'Table.Foreach',\r\n         children: <>\r\n            Table.Foreach는 첫 번째에 받은 테이블의 아이템을 각각 리턴합니다. <br/>\r\n            <Syntax>\r\n               {ForeachEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   }\r\n]\r\n\r\nexport default Table;","import { ReadyStage, Recommend, Basic, String, Table } from '../routes';\r\nimport { Threads } from '.';\r\n\r\ninterface TreeInterface {\r\n   [key: string]: Threads\r\n}\r\n\r\nexport const Tree: TreeInterface = {\r\n   Introduction: [\r\n      {name: 'Ready Stage', path: '/introduction/ready_stage', component: ReadyStage },\r\n      {name: 'Recommned', path: '/introduction/recommend', component: Recommend}\r\n   ],\r\n   Basic: Basic,\r\n   String: String,\r\n   Table: Table,\r\n   Function: [],\r\n   Metatable: [],\r\n   Debug: [],\r\n}","import React, { Component, useEffect } from 'react';\r\nimport { Button } from './';\r\nimport { Tree } from '../interface';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\ninterface SidebarState {\r\n   [key: string]: boolean\r\n}\r\n\r\nclass Sidebar extends Component<RouteComponentProps, SidebarState> {\r\n   state: SidebarState = {}\r\n\r\n   componentDidMount() {\r\n      Object.keys(Tree).forEach(key => {\r\n         this.setState({\r\n            [key]: true,\r\n         })\r\n      })\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div id='lua-sidebar'>\r\n            <h3 style={{cursor: 'pointer'}} onClick={() => this.props.history.replace('/')}>\r\n               Lua.Org Remaster\r\n            </h3>\r\n            <div className='lua-divider horizontal margin'></div>\r\n            <div id='lua-sidebar-body'>\r\n               <ul className='lua-list'>\r\n                  {Object.keys(Tree).map((key, index) => {\r\n                     const TreeData = Tree[key];\r\n                     let TreeItemDiv = (\r\n                        <div className={`lua-list background`} id={`lua-sidebar-list-${index}`}>\r\n                           {TreeData.map((Data, index) => {\r\n                              return <Button key={`lua-treedata-${index}`} onClick={() => {\r\n                                 this.props.history.replace(Data.path || '/');\r\n                              }}>\r\n                                 {Data.name}\r\n                              </Button>\r\n                           })}\r\n                        </div>\r\n                     )\r\n\r\n                     let UpdateList = () => {\r\n                        this.setState(current => ({\r\n                           [key]: !current[key],\r\n                        }))\r\n                        const list = document.getElementById(`lua-sidebar-list-${index}`);\r\n                        if (list) {\r\n                           if (!this.state[key]) {\r\n                              list.style.height = '0px';\r\n                              list.style.padding = '0px';\r\n                              list.style.overflow = 'hidden';\r\n                           } else {\r\n                              list.style.height = `${list.scrollHeight}px`;\r\n                              list.style.padding = '7px';\r\n                              list.style.overflow = 'auto';\r\n                           }\r\n                        }\r\n                     }\r\n\r\n                     return (\r\n                        <li className='lua-listitem-container' key={`lua-listitem-${index}`}>\r\n                           <Button onClick={() => {\r\n                              if (TreeData.length === 0) return;\r\n                              UpdateList();\r\n                           }}>\r\n                              {key}\r\n                           </Button>\r\n                           {TreeItemDiv}\r\n                        </li>\r\n                     )\r\n                  })}\r\n               </ul>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default withRouter(Sidebar);","import React from \"react\";\r\nimport { createRipples } from 'react-ripples';\r\n\r\nconst Button = (\r\n   {children, onClick, duration, color}: {\r\n      children?: any,\r\n      onClick?: Function,\r\n      duration?: number,\r\n      color?: string,\r\n   }\r\n) => {\r\n   const Ripple = createRipples({\r\n      color: color || 'rgba(255, 255, 255, 0.5)',\r\n      during: duration || 300,\r\n      className: 'lua-ripple',\r\n   });\r\n\r\n   return (\r\n      <Ripple>\r\n         <button \r\n            className='lua-button'\r\n            onClick={() => {\r\n               onClick && onClick();\r\n            }}\r\n         >\r\n         {children}\r\n         </button>\r\n      </Ripple>\r\n   )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\n\r\nconst Container = ({children}: {children:any}) => {\r\n   return <div className='lua-container'>\r\n      {children}\r\n   </div>\r\n}\r\n\r\nexport { Container };","// hm\r\n\r\nfunction SmallText({children}: {children: any}) {\r\n   return <span className='lua-small'>\r\n      {children}\r\n   </span>\r\n}\r\n\r\nexport default SmallText;","function Divider({margin, Direction}: {margin?: boolean, Direction: 'horizontal' | 'vertical'}) {\r\n   return <div className={`lua-divider ${Direction} ${margin && 'margin'}`}>\r\n\r\n   </div>\r\n}\r\n\r\nexport { Divider };","import React, { Component } from \"react\";\r\nimport { Button } from \".\";\r\n\r\n\r\nclass Topbar extends Component {\r\n   state = {\r\n      width: window.innerWidth,\r\n      SideActive: false,\r\n   }\r\n\r\n   componentDidMount() {\r\n      window.addEventListener('resize', () => {\r\n         this.setState({\r\n            width: window.innerWidth\r\n         })\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <nav>\r\n            <div className='lua-topbar'>\r\n               {this.state.width <= 600 && (\r\n                  <div style={{padding: '3px'}}>\r\n                     <Button onClick={() => {\r\n                        this.setState({\r\n                           SideActive: !this.state.SideActive\r\n                        });\r\n\r\n                        const Sidebar = document.getElementById('lua-sidebar');\r\n\r\n                        if (Sidebar) {\r\n                           if (this.state.SideActive) {\r\n                              Sidebar.style.width = `${window.innerWidth - 50}px`;\r\n                           } else {\r\n                              Sidebar.style.width = '0px';\r\n                           }\r\n                        }\r\n                     }}>\r\n                        =\r\n                     </Button>\r\n                  </div>\r\n               )}\r\n               <h2>Lua.Org Remaster</h2>\r\n            </div>\r\n         </nav>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default Topbar;","import React from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { Sidebar, Topbar } from './component';\nimport { Tree } from './interface';\nimport { Home } from './routes';\n\nconst RemappedTree: Array<{name: string, component: any, path: string}> = [];\n\nObject.keys(Tree).forEach(key => {\n  const TreeData = Tree[key];\n\n  TreeData.forEach(data => {\n    RemappedTree.push(data);\n  });\n});\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Sidebar />\n      <div className='lua-wrapper'>\n        <Topbar />\n        <Route component={Home} path='/' exact />\n        {RemappedTree.map((data, index) => {\n          return <Route key={`route-element-${index}`} component={data.component} path={data.path}  />\n        })}\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport AOS from 'aos';\nAOS.init({\n  once: true,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}