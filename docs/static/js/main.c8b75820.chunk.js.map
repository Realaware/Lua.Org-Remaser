{"version":3,"sources":["component/WarningText.tsx","component/Button.tsx","component/LinkButton.tsx","routes/ReadyStage.tsx","component/InfoText.tsx","routes/Recommend.tsx","library/Typical.ts","library/CreateThread.tsx","library/CreateCustomThread.tsx","library/Alert.ts","component/Syntax.tsx","images/sample_code.png","routes/Home.tsx","routes/Basic/index.tsx","lua/basic.ts","lua/string.ts","routes/String/index.tsx","routes/Table/index.tsx","lua/table.ts","component/Linebreak.tsx","lua/metatable.ts","interface/Tree.tsx","routes/Others/index.tsx","routes/Metatable/index.tsx","routes/Debug/index.tsx","lua/debug.ts","component/Sidebar.tsx","component/Container.tsx","component/SmallText.tsx","component/Divider.tsx","component/Topbar.tsx","App.tsx","index.tsx"],"names":["WarningText","children","className","Button","onClick","duration","color","id","Ripple","createRipples","during","event","withRouter","path","history","replace","ReadyStage","Direction","margin","href","style","marginTop","LinkButton","Component","InfoText","Recommend","Typical","config","onUpdate","text","length","timeForPerText","Math","floor","i","setTimeout","substring","CreateThread","title","CreateCustomThread","onCreate","animateCSS","element","animation","prefix","Promise","resolve","reject","animationName","node","document","getElementById","classList","add","addEventListener","stopPropagation","remove","once","makeKey","result","characters","charactersLength","charAt","random","createAlertElement","content","key","Alert","createElement","innerHTML","setProperty","a","querySelector","timeOutAlert","timeout","variant","AlertContainer","append","removeAlert","Syntax","width","marginLeft","navigator","clipboard","writeText","props","value","size","language","darcula","showLineNumbers","wrapLines","lineProps","whiteSpace","this","Home","state","EditorText","setState","src","sample","alt","push","Basic","name","component","border","padding","colSpan","Patterns","split","forEach","s","sp","desc","String","map","data","index","lineHeight","Table","LineBreak","dangerouslySetInnerHTML","__html","replaceAll","MetatableEx2","__newindexEx","Tree","Introduction","Others","marginBottom","Metatable","Method","Debug","Sidebar","RemappedTree","Result","Object","keys","section","threads","FilteredItems","inputContent","handleChange","bind","target","trim","resetFilteredItems","FilteredKeywords","Keyword","filter","item","toLowerCase","includes","toLocaleLowerCase","cursor","paddingLeft","paddingRight","type","placeholder","onChange","textAlign","thread","TreeData","TreeItemDiv","Data","current","list","height","scrollHeight","overflow","UpdateList","Container","SmallText","Divider","Topbar","window","innerWidth","SideActive","App","basename","process","exact","onload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c8b75820.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction WarningText({children}: {children: any}) {\r\n   return <span className='lua-warning'>\r\n      {children}\r\n   </span> \r\n}\r\n\r\nexport default WarningText ;","import React from \"react\";\r\nimport { createRipples, RipplesProps } from 'react-ripples';\r\n\r\ninterface ButtonProps extends RipplesProps {\r\n   children?: any;\r\n   duration?: number;\r\n   color?: string;\r\n   id?: string\r\n}\r\n\r\nconst Button = (\r\n   {children, onClick, duration, color, id}: ButtonProps\r\n) => {\r\n   const Ripple = createRipples({\r\n      color: color || 'rgba(255, 255, 255, 0.5)',\r\n      during: duration || 300,\r\n      className: 'lua-ripple',\r\n   });\r\n\r\n   return (\r\n      <Ripple onClick={(event) => {\r\n         onClick && onClick(event);\r\n      }}>\r\n         <button \r\n            className='lua-button'\r\n            id={id || ''}\r\n         >\r\n         {children}\r\n         </button>\r\n      </Ripple>\r\n   )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\ninterface LinkProps extends RouteComponentProps {\r\n   path: string, children?: any\r\n}\r\n\r\nfunction Link({path, children, history}: LinkProps) {\r\n   return <Button onClick={() => {\r\n      history.replace(path);\r\n   }}>\r\n      {children}\r\n   </Button>\r\n}\r\n\r\nexport default withRouter(Link);","import React, { Component } from \"react\";\r\nimport { Container, SmallText, Divider } from \"../component\";\r\nimport WarningText from \"../component/WarningText\";\r\nimport LinkButton from \"../component/LinkButton\";\r\n\r\nclass ReadyStage extends Component {\r\n   render() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               시작하기 앞서\r\n            </h2>\r\n            <Divider Direction='horizontal' margin />\r\n            <SmallText>\r\n               Lua.Org 리마스터는 루아를 빠르고 쉽게 이해 할 수 있는 사이트입니다 !<br/>\r\n               이 사이트는 Lua U와 바닐라 루아를 같이 다루고 있습니다.<br/>\r\n               완전 바닐라 루아를 배우고 싶으시다면 <a href='https://lua.org'>여기로 가주세요</a><br/>\r\n               <WarningText>\r\n                  Lua U에 없는 기능은 여기서 다루지 않습니다.\r\n               </WarningText>\r\n            </SmallText>\r\n            <h2>\r\n               시작하기 앞서...\r\n            </h2>\r\n            <SmallText>\r\n               궁금한점이나 추가했으면 하는 점은 제 개인 디스코드 something good#6611로 연락주세요 !\r\n            </SmallText>\r\n            <div style={{marginTop: '15px'}}>\r\n\r\n            </div>\r\n            <LinkButton path='/introduction/recommend'>\r\n               모든 준비가 됐다면 눌러주세요 ! \r\n            </LinkButton>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default ReadyStage;","function InfoText({children}: {children: any}) {\r\n   return <span className='lua-info'>\r\n      {children}\r\n   </span>\r\n}\r\n\r\nexport default InfoText;","import React, { Component } from \"react\";\r\nimport { Container, SmallText, Divider } from \"../component\";\r\nimport InfoText from \"../component/InfoText\";\r\nimport LinkButton from \"../component/LinkButton\";\r\n\r\nclass Recommend extends Component {\r\n   render() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               진짜로 시작하기 앞서...\r\n            </h2>\r\n            <Divider margin Direction='horizontal' />\r\n            <SmallText>\r\n               여러분들의 실력을 먼저 확인하고 자신이 무엇부터 시작할지 골라주세요.\r\n            </SmallText>\r\n\r\n            <div className='lua-rows'>\r\n               <LinkButton path='/basic/orientation'>\r\n                  <SmallText>\r\n                     초급자\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Basic</InfoText>\r\n               </LinkButton>\r\n               <LinkButton path='/table/orientation'>\r\n                  <SmallText>\r\n                     중급자\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Table</InfoText>\r\n               </LinkButton>\r\n               <LinkButton path='/debug/orientation'>\r\n                  <SmallText>\r\n                     고수\r\n                  </SmallText> <br/>\r\n                  <InfoText>{\">\"} Debug</InfoText>\r\n               </LinkButton>\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Recommend;","interface TypicalInterface {\r\n   text: string,\r\n   duration?: number\r\n}\r\n\r\n/**\r\n * \r\n * @param config \r\n * @param onUpdate \r\n * \r\n * duration will be counted as ms\r\n */\r\n\r\nfunction Typical(config: TypicalInterface, onUpdate: Function) {\r\n   var { text, duration } = config;\r\n\r\n   if (!duration) duration = 1000;\r\n   if (typeof(text) !== 'string') return;\r\n\r\n   const length = text.length;\r\n   const timeForPerText = Math.floor(duration / length);\r\n\r\n   for (let i = 0; i<length; i++) {\r\n      setTimeout(() => {\r\n         onUpdate(text.substring(0, i + 1));\r\n      }, i * timeForPerText);\r\n   }\r\n   \r\n}\r\n\r\nexport default Typical;","import React from \"react\";\r\nimport { Container, Divider } from \"../component\";\r\n\r\n\r\nfunction CreateThread({children, title}: {\r\n   children: any,\r\n   title: string\r\n}) {\r\n   \r\n   return function() {\r\n      return (\r\n         <Container>\r\n            <h2>\r\n               {title}\r\n            </h2>\r\n            <Divider margin Direction='horizontal' />\r\n            <div className='lua-card fullwidth'>\r\n               {children}\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default CreateThread;","import React from \"react\";\r\nimport CreateThread  from \"./CreateThread\";\r\n\r\nfunction CreateCustomThread({onCreate}: {onCreate?: any}) {\r\n   return function({title, children}: {title: string, children: any}) {\r\n      return CreateThread({\r\n         title,\r\n         children: <>\r\n            {onCreate}\r\n            {children}\r\n         </>\r\n      })\r\n   }\r\n}\r\n\r\n\r\nexport default CreateCustomThread;","interface showAlertProps {\r\n   variant: 'default' | 'success' | 'error'\r\n}\r\n\r\nconst animateCSS = (element: string, animation: string, prefix = 'animate__') =>\r\n  new Promise((resolve, reject) => {\r\n    const animationName = `${prefix}${animation}`;\r\n    const node = document.getElementById(element);\r\n\r\n    node?.classList.add(`${prefix}animated`, animationName);\r\n\r\n    function handleAnimationEnd(event: any) {\r\n      event.stopPropagation();\r\n      node?.classList.remove(`${prefix}animated`, animationName);\r\n      resolve('Animation ended');\r\n    }\r\n\r\n    node?.addEventListener('animationend', handleAnimationEnd, {once: true});\r\n  });\r\n\r\nfunction makeKey(length: number) {\r\n   var result           = '';\r\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n   var charactersLength = characters.length;\r\n\r\n   for ( var i = 0; i < length; i++ ) {\r\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n   }\r\n\r\n   return result;\r\n}\r\n\r\nfunction createAlertElement(content: string, key: string): HTMLDivElement {\r\n   const Alert = document.createElement('div');\r\n   const CheckElement = '<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 1024 1024\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\"></path></svg>';\r\n\r\n   Alert.innerHTML = CheckElement + `\\t${content}`;\r\n   Alert.id = key;\r\n   Alert.classList.add('animate__animated', 'animate__fadeIn');\r\n   Alert.style.setProperty('--animate-duration', '0.3s');\r\n\r\n   return Alert;\r\n}\r\n\r\nfunction showAlert(content: string, config?: showAlertProps): string | null {\r\n   const key = makeKey(15);\r\n   const Alert = createAlertElement(content, key);\r\n   \r\n   Alert.classList.add(config?.variant || 'default');\r\n\r\n   const AlertContainer = document.querySelector('#lua-alert-container');\r\n\r\n   if (AlertContainer) {\r\n      AlertContainer.append(Alert);\r\n\r\n      return key;\r\n   }\r\n\r\n   Alert.remove();\r\n   return null;\r\n}\r\n\r\nasync function removeAlert(key: string): Promise<void> {\r\n   const AlertContainer = document.querySelector('#lua-alert-container');\r\n\r\n   if (AlertContainer) {\r\n      const Alert = document.getElementById(key);\r\n      if (Alert) {\r\n         await animateCSS(key, 'fadeOut');\r\n         Alert.remove();\r\n      }\r\n   }\r\n}\r\n\r\nfunction timeOutAlert(content: string, timeout: number, config?: showAlertProps): void {\r\n   const key = makeKey(15);\r\n   const Alert = createAlertElement(content, key);\r\n   Alert.classList.add(config?.variant || 'default');\r\n\r\n   const AlertContainer = document.querySelector('#lua-alert-container');\r\n\r\n   if (AlertContainer) {\r\n      AlertContainer.append(Alert);\r\n\r\n      setTimeout(() => {\r\n         removeAlert(key);\r\n      }, timeout)\r\n   }\r\n}\r\n\r\nexport {\r\n   showAlert,\r\n   removeAlert,\r\n   timeOutAlert\r\n}","// Credit: https://github.com/react-syntax-highlighter/react-syntax-highlighter\r\n\r\nimport React, { Component } from \"react\";\r\nimport { LightAsync as SyntaxHighlighter} from 'react-syntax-highlighter';\r\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Button } from \".\";\r\nimport { timeOutAlert } from \"../library/Alert\";\r\nimport { IoIosCopy } from 'react-icons/io';\r\n\r\nexport default class Syntax extends Component<{children?: string, value?: string}> {\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <div style={{width: '100px', marginLeft: 'auto'}}>\r\n               <Button onClick={async () => {\r\n                  navigator.clipboard && navigator.clipboard.writeText(this.props.children || this.props.value || ''); timeOutAlert('Copied !', 2000);\r\n               }}>\r\n                  <IoIosCopy size='15' />\r\n               </Button>\r\n            </div>\r\n            <SyntaxHighlighter language=\"lua\" style={darcula} showLineNumbers wrapLines={true} lineProps={{style: { whiteSpace: 'pre'}}}>\r\n               {this.props.children || this.props.value || ''}\r\n            </SyntaxHighlighter>\r\n         </div>\r\n      )\r\n   }\r\n}","export default __webpack_public_path__ + \"static/media/sample_code.287fdd5a.png\";","import React, { Component } from 'react';\r\nimport { Container, SmallText, Divider } from \"../component\";\r\nimport { Typical } from '../library';\r\nimport Syntax from '../component/Syntax';\r\nimport sample from '../images/sample_code.png';\r\nimport { withRouter, RouteComponentProps } from 'react-router';\r\n\r\nconst Script =\r\n`▀█▀ █░█ ▄▀█ █▄░█ █▄▀   █▄█ █▀█ █░█   █▀▀ █▀█ █▀█   █░█ █ █▀ █ ▀█▀ █ █▄░█ █▀▀\r\n░█░ █▀█ █▀█ █░▀█ █░█   ░█░ █▄█ █▄█   █▀░ █▄█ █▀▄   ▀▄▀ █ ▄█ █ ░█░ █ █░▀█ █▄█`;\r\n\r\nclass Home extends Component<RouteComponentProps> {\r\n   state = {\r\n      EditorText: ''\r\n   }\r\n\r\n   componentDidMount() {\r\n      const callback = (EditorText: string) => {\r\n         this.setState({\r\n            EditorText\r\n         });\r\n      }\r\n\r\n      Typical({\r\n         text: Script,\r\n         duration: 5000\r\n      }, callback);\r\n   }\r\n\r\n   render() {\r\n      \r\n      return (\r\n         <Container>\r\n            <h2>\r\n               Lua.Org 리마스터에 방문해주셔서 감사합니다 !\r\n            </h2>\r\n            <div className='lua-column'>\r\n               <div className='lua-card fullwidth'>\r\n                  <h3>\r\n                     Lua.Org Remaster는\r\n                  </h3>\r\n                  <SmallText>\r\n                     여러분들이 루아를 조금 더 쉽고 간편하게 배울 수 있도록 해주는 사이트 입니다 !\r\n                  </SmallText>\r\n               </div>\r\n               <div className='lua-card fullwidth'>\r\n                  <h3>\r\n                     크레딧 및 사용된 라이브러리\r\n                  </h3>\r\n                  <ul>\r\n                     <li>\r\n                        something good#6611\r\n                     </li>\r\n                  </ul>\r\n                  <Divider Direction='horizontal' />\r\n                  <ul>\r\n                     <li>ReactJS</li>\r\n                     <li>react-icons</li>\r\n                     <li>react-syntax-highligter</li>\r\n                     <li>react-ripples</li>\r\n                  </ul>\r\n               </div>\r\n               <div className='lua-card fullwidth'>\r\n                  <Syntax>\r\n                     {this.state.EditorText}\r\n                  </Syntax>\r\n               </div>\r\n               <div className='lua-card fullwidth'>\r\n                  <div id='lua-sample-container'>\r\n                     <img src={sample} alt='Sample'>\r\n                        \r\n                     </img>\r\n                     <div className='lua-sample-title'>\r\n                        <h1>쉽고, 빠르게</h1>\r\n                        <button className='lua-Inputbase button' onClick={() => this.props.history.push('/introduction/ready_stage')}>지금 바로 시작하기 </button>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default withRouter(Home);","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\n\r\nimport Syntax from \"../../component/Syntax\";\r\nimport WarningText from \"../../component/WarningText\";\r\nimport { FunctionEx, ForloopEx, ForloopEx2, ForloopEx3, RecursionEx, AnonymousFunctionEx } from '../../lua/basic';\r\n\r\nexport const Basic: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/basic/orientation',\r\n      component: CreateThread({\r\n         title: '루아 베이직 첫번째 글에 오신걸 환영합니다 👏', children: <span>\r\n         이 섹션에서는 루아의 기본 기능들을 배울겁니다 ! <br/>\r\n         여기서 배우는 기능들의 조금 더 새부적인것은 각 섹션에 가시면 됩니다 ! <br/>\r\n         모바일이면 위쪽의 버튼을 눌러 사이드바를 열고 직접 원하는 글을 선택해주세요.\r\n         </span>\r\n      })\r\n   },\r\n   {\r\n      name: 'Variable',\r\n      path: '/basic/var',\r\n      component: CreateThread({\r\n         title: 'Variable',\r\n         children: <>\r\n            변수는 일종에 저장소 같은것 입니다.<br/>\r\n            변수를 통해서 다양한 정보를 저장하고 불러올 수 있습니다.<br/>\r\n            변수에는 크게 지역변수, 전역변수가 있습니다. 이를 구별하는 방식은 변수의 선언 위치에 따라 달라집니다.\r\n            <Syntax>\r\n               {`local Myname = 'Real'; -- 전역변수\\n\\nfunction hi()\\n  local text = 'hi'; -- 지역변수\\n  print(text)\\nend`}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String',\r\n      path: '/basic/string',\r\n      component: CreateThread(\r\n         {\r\n            title: 'String',\r\n            children: <>\r\n               문자열은 모든 프로그래밍의 기본이 되는 요소입니다. \r\n\r\n               사실상 숫자 이외의 모든 글자들은 문자열이라고 생각하시면 됩니다.\r\n               <Syntax>\r\n                  {\"local Myname = 'Real'; -- 문자열\\nlocal Myage = 20; -- 숫자\\n\\nprint(type(Myname)) -- 예상값: String\"}\r\n               </Syntax>\r\n               문자열은 ' 또는 \" 을 사용하여 사용이 가능합니다.\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Table',\r\n      path: '/basic/table',\r\n      component: CreateThread(\r\n         {\r\n            title: 'Table',\r\n            children: <>\r\n               테이블은 여러 데이터의 집합입니다.\r\n               테이블을 통해 다양한 데이터를 저장 할 수 있습니다.\r\n               <br/>\r\n               테이블은 앞으로 루아를 하면서 많이 사용 할 기능이기 때문에 기초를 확실하게 해두셔야 합니다.\r\n               <Syntax>\r\n                  {\"local Mytable = {} -- 테이블 정의\\n table.insert(Mytable, 'Real') -- table.insert를 통해 테이블에 데이터 저장.\"}\r\n               </Syntax>\r\n\r\n               테이블을 프린트 했을때 우리는 아래처럼\r\n               <Syntax>\r\n                  table: 0x00000006\r\n               </Syntax>\r\n               테이블이 할당받은 메모리 값이 출력됩니다. 이걸 이용하면 굳이 테이블 안의 내용물을 확인하지 않아도 두 테이블이 같은지 확인 할 수 있습니다.<br/>\r\n               우리는 테이블[인덱스] 를 이용해 값을 얻을 수 있습니다.\r\n               <Syntax>\r\n                  {\"Mytable[1] -- 예상값: Real\"}\r\n               </Syntax>\r\n               여기서 1은 테이블에서 이 값의 순서를 나타냅니다.<br />\r\n               보통 다른 언어들은 인덱스가 0부터 시작하지만 루아는 1부터 시작합니다.<br/>\r\n               우리가 인덱스를 따로 지정하지 않는다면 값은 자동적으로 숫자를 할당받지만 우리가 직접 인덱스를 설정하면 그 값이 할당됩니다.<br/>\r\n               여기선 문자열, 숫자 둘 다 가능합니다\r\n               <Syntax>\r\n                  {\"local Mytable = {\\n   Myname = 'Real'\\n};\\n print(Mytable.Myname) -- 예상값: Real\"}\r\n               </Syntax>\r\n\r\n\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Operator',\r\n      path: '/basic/operator',\r\n      component: CreateThread(\r\n         {\r\n            title: 'Operator',\r\n            children: <>\r\n               오퍼레이터는 {\"< > <= >= ==\"} 등을 의미합니다.\r\n               \r\n               여기서 {\"< > <= >= \"} 등은 숫자나 테이블에만 사용 가능합니다 <br/>\r\n               테이블의 경우는 나중에 조금 더 심화적으로 배울겁니다. 지금은 숫자만 알아두세요.\r\n\r\n               <Syntax>\r\n                  {\"local FirstNumber = 1;\\nlocal SecondNumber = 2;\\nprint(FirstNumber == SecondNumber) -- 예상값: False\\nprint(FirstNumber < SecondNumber) -- 예상값: True\"}\r\n               </Syntax>\r\n\r\n               <table style={{border: '1px solid rgb(50, 50, 50)', padding: '10px'}}>\r\n                  <thead>\r\n                     <tr>\r\n                        <th>이름</th>\r\n                        <th colSpan={2}>의미</th>\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <tr><td>{\">\"}</td><td>앞에있는 수가 뒤에있는 수보다 큼</td></tr>\r\n                     <tr><td>{\"<\"}</td><td>앞에있는 수가 뒤에있는 수보다 작음</td></tr>\r\n                     <tr><td>{\">=\"}</td><td>앞에있는 수가 뒤에있는 수보다 크거나 같음</td></tr>\r\n                     <tr><td>{\"<=\"}</td><td>앞에있는 수가 뒤에있는 수보다 작거나 같음</td></tr>\r\n                     <tr><td>{\"==\"}</td><td>두 개의 숫자가 같음</td></tr>\r\n                     <tr><td>{\"#\"}</td><td>문자열, 테이블의 길이를 알려줌</td></tr>\r\n                  </tbody>\r\n               </table>\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'Function',\r\n      path: '/basic/function',\r\n      component: CreateThread({\r\n         title: 'Function',\r\n         children: <>\r\n            함수는 여러분들이 코딩을 하는데 있어서 매우 중요한 부분입니다.<br/>\r\n            함수를 이용하면 복잡한 작업도 미리 적어둔 함수만 부르면 쉽게 이용 할 수 있습니다. <br/>\r\n\r\n            <Syntax>\r\n               {FunctionEx}\r\n            </Syntax>\r\n\r\n            함수의 종류에는 여러가지가 있습니다.<br/>\r\n            그 중 우리는 익명 함수와 재귀 함수를 알아볼겁니다.<br/>\r\n\r\n            먼저 익명 함수는 말 그대로 함수 이름이 없는 함수를 말합니다.\r\n            익명 함수를 만드는 방법은\r\n            <Syntax>\r\n               {AnonymousFunctionEx}\r\n            </Syntax>\r\n            이것이 작동하는 방식은 먼저 EnterShop이라는 함수를 호출하면 이름이 없는 \r\n            <Syntax>\r\n               return function()\r\n                  print(name .. \"'ve bought a water\");\r\n               end\r\n            </Syntax>\r\n            이부분의 함수가 리턴됩니다.\r\n            그리고 우리가 BuyItem이라고 정의한 변수를 호출하면 위의 함수가 실행되는것입니다.\r\n            <br/>\r\n            <br/>\r\n            재귀 함수는 결과 값이 참이 될때까지 스스로를 계속 호출하는 함수를 말합니다. <br/>\r\n            함수의 장점을 이용한것이 재귀 함수입니다. 에를 들어\r\n            <Syntax>\r\n               {RecursionEx}\r\n            </Syntax>\r\n            이때 addCount 라는 함수는 count가 10이 될때까지 계속 반복합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: \"For Loop\",\r\n      path: '/basic/for_loop/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15',\r\n      component: CreateThread({\r\n         title: 'For Loop',\r\n         children: <>\r\n            For Loop는 코딩을 하는데 있어서 매우 중요한 요소중 하나입니다.<br/>\r\n            루아에는 크게 두 가지의 루프가 있습니다.\r\n            <Syntax>\r\n               {ForloopEx}\r\n            </Syntax>\r\n            <Syntax>\r\n               {ForloopEx2}\r\n            </Syntax>\r\n\r\n            루프는 반복적인 작업을 줄여주고 매우 유용하게 사용되기 때문에 꼭 알아둬야합니다. <br/><br/>\r\n\r\n            루아에는 pairs와 ipairs 두 가지가 존재하는데 이 두 개의 차이점은 성질에 있습니다.<br/>\r\n            pairs의 경우 키-값 인덱스-값 두 가지 형태에 전부 이용 가능하나 ipairs는 키-값의 형태의 테이블에만 이용 할 수 있습니다.\r\n            <Syntax>\r\n               {ForloopEx3}\r\n            </Syntax>\r\n            pairs는 모든 경우에 사용이 가능하기 때문에 더 자주 이용합니다. <br/>\r\n            <WarningText>pairs에서 인덱스-값 형식의 테이블에서는 순서가 보장되지 않습니다.</WarningText>\r\n         </>\r\n      })\r\n   }\r\n]","const FunctionEx =\r\n`function 함수명(name)\r\n   print(name);\r\nend -- 함수는 end를 이용해 항상 닫아줘야함.\r\n함수명('Real') -- 예상값: Real`;\r\nconst AnonymousFunctionEx =\r\n`function Entershop(name)\r\n   return function()\r\n      print(name .. \"'ve bought a water\");\r\n   end\r\nend\r\n\r\nlocal BuyItem = Entershop('Real');`;\r\n\r\nconst RecursionEx = \r\n`local count = 0;\r\nfunction addCount()\r\n   if (count == 10) then\r\n      return;\r\n   end\r\n   count = count + 1;\r\n   addCount();\r\nend\r\n\r\naddCount();`;\r\nconst ForloopEx = \r\n`for i = 1, 10 do\r\n   print(i); -- 예상값: 1, 2, 3, 4, 5 ...\r\nend`;\r\nconst ForloopEx2 =\r\n`local Students = {'Jason', 'Rick', 'Michale', 'Tommy'};\r\nfor index, value in pairs(Students) do\r\n   print(index, value); -- 예상값: 1 Jason, 2 Rick, 3 Michale, 4 Tommy\r\nend`;\r\nconst ForloopEx3 =\r\n`local Feeling = {Monday = 'bad'};\r\nfor index, value pairs(Feeling) do\r\n   print(index, value); -- 정상적으로 Monday bad가 출력됨. \r\nend\r\nfor index, value ipairs(Feeling) do\r\n   print(index, value); -- 아무것도 출력되지 않음.\r\nend`;\r\n\r\nexport {\r\n   ForloopEx,\r\n   ForloopEx2,\r\n   ForloopEx3,\r\n   FunctionEx,\r\n   RecursionEx,\r\n   AnonymousFunctionEx\r\n}","const ByteEx = \r\n`local MyString = 'what is byte?';\r\nprint(string.byte(MyString, 1, #MyString)); -- 예상값: 119 104 97 116 32 105 115 32 98 121 116 101 63\r\nprint('\\\\119\\\\104\\\\97\\\\116\\\\32\\\\105\\\\115\\\\32\\\\98\\\\121\\\\116\\\\101\\\\63') -- 예상값: what is byte?`;\r\nconst CharEx = \r\n`print(string.char(97)) -- 예상값: a`;\r\nconst FindEx =\r\n`local MyString = \"Hello World\";\r\nprint(string.find(MyString, 'World')); -- 예상값: 7 11`;\r\nconst FormatEx =\r\n`local Myname = 'Real';\r\nlocal Formatted = string.format('Welcome, %q', Myname);\r\nprint(Formatted) -- 예상값: Welcome, Real`;\r\nconst PatternString = `x: (x가 이것들중 하나가 아닌 ^$()%.[]*+-?) x 스스로를 나타냄.\r\n.: 모든 문자\r\n%a: 모든 글자\r\n%c: 모든 제어 문자\r\n%d: 모든 숫자\r\n%g: 공백을 제외한 모든 프린트 가능한 문자\r\n%l: 모든 소문자 글자\r\n%p: 모든 구두 글자 (;,\",~ 등)\r\n%s: 모든 공백 글자\r\n%u: 모든 대문자 글자\r\n%w: 모든 알파벳 문자\r\n%x: 모든 16진수 숫자`;\r\n\r\nconst Patterns: Array<{name: string, desc: string}> = [];\r\n\r\nPatternString.split('\\n').forEach(s => {\r\n   const sp = s.split(':');\r\n   Patterns.push({name: sp[0], desc: sp[1]});\r\n})\r\nconst GmatchEx = \r\n`local Mystring = \"hello world from Lua\"\r\nfor w in string.gmatch(Mystring, \"%a+\") do -- %a는 모든 글자를 의미\r\n  print(w);\r\nend\r\n\r\n--   예상값:\r\n--   hellow\r\n--   world\r\n--   from\r\n--   Lua`;\r\nconst GsubEx =\r\n`x = string.gsub(\"hello world\", \"%w+\", \"%1 %1\")\r\n--> x=\"hello hello world world\"\r\n\r\nx = string.gsub(\"hello world\", \"%w+\", \"%0 %0\", 1)\r\n--> x=\"hello hello world\"\r\n\r\nx = string.gsub(\"hello world from Lua\", \"(%w+)%s*(%w+)\", \"%2 %1\")\r\n--> x=\"world hello Lua from\"\r\n\r\nx = string.gsub(\"4+5 = $return 4+5$\", \"%$(.-)%$\", function (s)\r\n      return loadstring(s)()\r\n    end)\r\n--> x=\"4+5 = 9\"\r\n\r\nlocal t = {name=\"lua\", version=\"5.4\"}\r\nx = string.gsub(\"$name-$version.tar.gz\", \"%$(%w+)\", t)\r\n--> x=\"lua-5.4.tar.gz\"`;\r\nconst LenEx = \r\n`print(string.len('Hello World')); -- 예상값: 11`;\r\nconst MatchEx =\r\n`x = string.match('hihihi123', 'hi120172067192');\r\nprint(x); -- 예상값: nil\r\n\r\nx = string.match('hihihi123', 'hi');\r\nprint(x); -- 예상값: hi`;\r\nconst RepEx =\r\n`x = string.rep('hi', 4);\r\nprint(x) -- 예상값: hihihihi`;\r\nconst ReverseEx = \r\n`print(string.reverse('! dlroW olleH')) -- 예상값: Hello World !`;\r\nconst SubEx =\r\n`x = 'Hello World'\r\nprint(string.sub(x, 5, #x)); -- 예상값: World`;\r\n\r\nexport {\r\n   ByteEx,\r\n   SubEx,\r\n   ReverseEx,\r\n   RepEx,\r\n   MatchEx,\r\n   LenEx,\r\n   GsubEx,\r\n   GmatchEx,\r\n   FormatEx,\r\n   CharEx,\r\n   FindEx,\r\n   Patterns\r\n}","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport Syntax from \"../../component/Syntax\";\r\n\r\nimport InfoText  from '../../component/InfoText';\r\nimport LinkButton from \"../../component/LinkButton\";\r\nimport WarningText from \"../../component/WarningText\";\r\nimport { Patterns, ByteEx, FindEx, GmatchEx, GsubEx, MatchEx, CharEx, FormatEx, LenEx, RepEx, ReverseEx, SubEx } from '../../lua/string';\r\n\r\n\r\nexport const String: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/string/orientation',\r\n      component: CreateThread({\r\n         title: '베이직 레벨을 끝내셨군요 축하드립니다 🔥🔥', children: <>\r\n         이번엔 조금 더 심화적인 문자열을 배워봅시다. <br/>\r\n         시작하기 앞서 여러분들이 알아두면 좋은것이 있습니다.\r\n\r\n         <br/>\r\n\r\n         먼저 루아에 있는 여러가지 패턴들을 알아두셔야 합니다.\r\n\r\n         <table style={{border: '1px solid rgb(50, 50, 50)', padding: '10px'}}>\r\n            <thead>\r\n               <tr>\r\n                  <th>이름</th>\r\n                  <th colSpan={2}>의미</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {Patterns.map((data, index) => {\r\n                  return <tr key={`lua-patterns-${index}`}>\r\n                     <td>{data.name}</td>\r\n                     <td>{data.desc}</td>\r\n                  </tr>\r\n               })}\r\n            </tbody>\r\n         </table>\r\n         \r\n         저도 완벽하게 다 알진 못하지만 몇개는 알아두면 좋습니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Byte',\r\n      path: '/string/string_byte',\r\n      component: CreateThread(\r\n         {\r\n            title: 'String.Byte',\r\n            children: <>\r\n               <Syntax>\r\n                  String.Byte (s, [, i [, j]])\r\n               </Syntax>\r\n               이번엔 좀 멋진걸 배워봅시다. 누군가 보면 진짜 멋진 프로그래머라고 생각할 😄<br/>\r\n               String.Byte는 첫번째 인자에 오는 문자열을 바이트의 형태로 바꿔줍니다.\r\n               (바이트가 뭔지 모르신다면 찾아보세요.)<br/>\r\n               두번째와 세번째 인자에는 범위를 지정 할 수 있습니다.\r\n               지정하지 않는다면 첫번째 글자만 바이트화 시킵니다.\r\n               <Syntax>\r\n                  {ByteEx}\r\n               </Syntax>\r\n            </>\r\n         }\r\n      )\r\n   },\r\n   {\r\n      name: 'String.Char',\r\n      path: '/string/string_char',\r\n      component: CreateThread({\r\n         title: 'String.Char',\r\n         children: <>\r\n            String.Char은 첫번째 인자에 상응하는 문자열을 리턴합니다.<br/>\r\n            예를 들어 \r\n            <Syntax>\r\n               {CharEx}\r\n            </Syntax>\r\n            라는 결과가 나옵니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Find',\r\n      path: '/string/string_find',\r\n      component: CreateThread({\r\n         title: 'String.Find',\r\n         children: <>\r\n            String.Find는 첫번째 인자에 받은 문자열에 두번째 인자에서 받은 문자열이 있는지 확인 할 수 있습니다.<br/>\r\n            만약 존재한다면 그 문자열의 인덱스를 알려주고 없다면 nil을 리턴합니다. <br />\r\n            <Syntax>\r\n               {FindEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Format',\r\n      path: '/string/string_format',\r\n      component: CreateThread({\r\n         title: 'String.Format',\r\n         children: <div className='lua-column'>\r\n            String.Format은 쉽게 문자열 안에 변수를 집어 넣을 수 있게 해줍니다.<br/>\r\n            자바스크립트나 C#에선 조금 더 간단하지만 루아에서는 이 기능을 써야합니다.<br/>\r\n            <Syntax>\r\n               {FormatEx}\r\n            </Syntax>\r\n            여기서 %q는 문자열, 숫자, 참/거짓을 전부 의미합니다.<br/>\r\n            <LinkButton path='/string/orientation'>패턴을 잘 모르면 <br/> <InfoText>시작으로 가기</InfoText> </LinkButton>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Gmatch',\r\n      path: '/string/string_gmatch',\r\n      component: CreateThread({\r\n         title: 'String.Gmatch',\r\n         children: <div>\r\n            <WarningText>String.Gmatch는 패턴을 잘 이해하셔야 제대로 사용 할 수 있습니다.</WarningText>\r\n            String.Gmatch는 반복 함수를 리턴하는데 한번 불려질때마다 첫번째 인자에 받은 문자열에서 패턴으로부터 얻은것을 리턴합니다. <br/>\r\n            3번째 인자에선 어디서부터 시작할지 정할 수 있으며 음수가 될 수 있습니다.\r\n            <Syntax>\r\n               {GmatchEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Gsub',\r\n      path: '/string/string_gsub',\r\n      component: CreateThread({\r\n         title: 'String.Gsub',\r\n         children: <div style={{lineHeight: '30px'}}>\r\n            <WarningText>String.Gsub 패턴을 잘 이해하셔야 제대로 사용 할 수 있습니다.</WarningText>\r\n            <InfoText>편의상 문자열은 s라고 하겠습니다.</InfoText> <br/>\r\n\r\n            string.gsub는 패턴의 모든 또는 주어진 네번째 인자 발생을 3번째 인자에서 주어진 값 - 문자열, 테이블, 함수가 될 수 있는 - 으로 바꾼것의 복사본을 리턴합니다. <br/>\r\n\r\n            만약 3번째 인자가 문자열이라면 이 값은 대체값으로 이용됩니다.<br/>\r\n            만약 3번째 인자가 테이블이라면 첫번째로 얻은 값을 테이블의 키로 사용합니다.<br/>\r\n            만약 3번째 인자가 함수라면 패턴에 맞는 값을 찾을때마다 함수를 부르고 첫번째 인자에 그 값을 보냅니다. <br/>\r\n\r\n            어떠한 경우든, 만약 패턴이 값을 찾지 못한다면 전체 패턴이 값에 있는것 처럼 행동합니다. <br/>\r\n            만약 값이 테이블이나 함수의 콜로 얻어진것이 문자열, 숫자이면 이것들은 대체값으로 사용됩니다. 반대로 만약 false 또는 nil 이라면 어떠한 대체값이 없는것으로 간주됩니다. <br/>\r\n            <InfoText>\r\n               설명 이해를 위해 예제를 봅시다.\r\n            </InfoText>\r\n            <Syntax>\r\n               {GsubEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Len',\r\n      path: '/string/string_len',\r\n      component: CreateThread({\r\n         title: 'String.Len',\r\n         children: <div>\r\n            설명할게 없습니다.\r\n            <Syntax>\r\n               {LenEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Lower',\r\n      path: '/string/string_lower',\r\n      component: CreateThread({\r\n         title: 'String.Lower',\r\n         children: <div>\r\n            첫번째 인자에서 받은 문자열을 소문자로 전부 바꿔줍니다.\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Match',\r\n      path: '/string/string_match',\r\n      component: CreateThread({\r\n         title: 'String.Match',\r\n         children: <div>\r\n            String.Match는 첫 번째 인자에서 받은 문자열에서 2번째 인자에서 받은 패턴에 맞는 첫번째 값을 리턴합니다.<br/>\r\n            만약 값을 찾으면 값을 리턴하고 그렇지 않다면 nil을 리턴합니다. <br/>\r\n            세 번째 인자에서는 시작 숫자를 쓸 수 있습니다. 기본은 1이며 음수가 될 수 있습니다.\r\n            <Syntax>\r\n               {MatchEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Rep',\r\n      path: '/string/string_rep',\r\n      component: CreateThread({\r\n         title: 'String.Rep',\r\n         children: <div>\r\n            String.Rep은 첫 번째 인자에서 받은 문자열을 두 번째 인자에서 받은 수 만큼 반복합니다.<br/>\r\n            만약 두 번째 인자가 양수가 아니면 빈 문자열을 리턴합니다.<br/>\r\n            <Syntax>\r\n               {RepEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Reverse',\r\n      path: '/string/string_reverse',\r\n      component: CreateThread({\r\n         title: 'String.Reverse',\r\n         children: <div>\r\n            String.Reverse는 첫 번째 인자에 주어진 문자열을 거꾸로 뒤집습니다.\r\n            <Syntax>\r\n               {ReverseEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Sub',\r\n      path: '/string/string_sub',\r\n      component: CreateThread({\r\n         title: 'String.Sub',\r\n         children: <div>\r\n            <InfoText>편의상 문자열은 s라고 하겠습니다.</InfoText> <br/>\r\n            String.Sub는 두 번째 인자에서 시작하는 s의 서브스트링을 리턴합니다. (세 번째 인자까지 계속하거나 정의되어 있지 않으면 끝까지 리턴합니다.)\r\n            <Syntax>\r\n               {SubEx}\r\n            </Syntax>\r\n         </div>\r\n      })\r\n   },\r\n   {\r\n      name: 'String.Upper',\r\n      path: '/string/string_upper',\r\n      component: CreateThread({\r\n         title: 'String.Upper',\r\n         children: <div>\r\n            첫 번째 인자에 받은 문자열을 대문자로 바꿔 리턴합니다.\r\n         </div>\r\n      })\r\n   }\r\n]","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport Syntax from \"../../component/Syntax\";\r\nimport { KeyTableEx, IndexTableEx, ConcatEx, InsertEx, MoveEx, ForeachEx } from '../../lua/table';\r\n\r\n\r\nexport const Table: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/v1/table/orientation',\r\n      component: CreateThread({\r\n         title: '드디어 테이블로 왔습니다 ! 짞짞짞 ',\r\n         children: <>\r\n            시작하기 앞서, 우리는 키-값과 인덱스-값 테이블의 차이점을 알아야합니다. \r\n            <Syntax>\r\n               {KeyTableEx}\r\n            </Syntax>\r\n            이런 형식의 테이블을 키-값 형식이라고 합니다. 이 테이블에는 각 아이템에 순서가 존재하며 For loop를 통해 인덱스 값을 얻으면 해당 아이템의 순서를 얻게됩니다.\r\n            <Syntax>\r\n               {IndexTableEx}\r\n            </Syntax>\r\n            이런 형식의 테이블을 인덱스-값 형식이라고 합니다. 이 테이블에는 순서를 보장할 요소가 없습니다.<br/>\r\n            For loop를 통해 인덱스 값을 얻으면 예를 들어 Ramen 또는 stinky_tofu를 얻습니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Concat',\r\n      path: '/table/table_concat',\r\n      component: CreateThread({\r\n         title: 'Table.Concat',\r\n         children: <>\r\n            Table.Concat은 첫 번째 인자에 받은 테이블의 모든 아이템 (문자열, 숫자) 등을 문자열로 리턴합니다. <br/>\r\n            <Syntax>\r\n               {ConcatEx}\r\n            </Syntax>\r\n\r\n            두 번째 인자에는 각 아이템 사이에 들어갈 문자를 정할 수 있습니다.<br/>\r\n            세 번째와 마지막 인자에는 각각 시작, 끝 위치를 정할 수 있고 마지막 인자가 테이블의 길이보다 길면 빈 문자를 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Insert',\r\n      path: '/table/table_insert',\r\n      component: CreateThread({\r\n         title: 'Table.Insert',\r\n         children: <>\r\n            Table.Insert는 첫 번째 인자에 타겟 테이블, 두 번째 인자에는 원하는 위치 또는 그냥 값을 넣을 수 있습니다. <br/>\r\n            <Syntax>\r\n               {InsertEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Move',\r\n      path: '/table/table_move',\r\n      component: CreateThread({\r\n         title: 'Table.Move',\r\n         children: <>\r\n            Table.Move는 첫 번째 인자에 테이블을 받습니다.<br/>\r\n            두 번째, 세 번째 인자에는 시작과 끝 위치를 받고 네 번째 인자에는 범위 안에 있는 아이템을 둘 위치, 마지막 인자에는 대상으로 하는 테이블을 받습니다.\r\n            <Syntax>\r\n               {MoveEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Remove',\r\n      path: '/table/table_remove',\r\n      component: CreateThread({\r\n         title: 'Table.Remove',\r\n         children: <>\r\n            Table.Remove는 첫 번째 인자에서 받은 테이블의 두 번째 인자 위치의 아이템을 제거합니다.\r\n         </>   \r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Getn',\r\n      path: '/table/table_getn',\r\n      component: CreateThread({\r\n         title: 'Table.Getn',\r\n         children: <>\r\n            Table.Getn은 테이블을 통과한 아이템의 갯수를 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Clear',\r\n      path: '/table/table_clear',\r\n      component: CreateThread({\r\n         title: 'Table.Clear',\r\n         children: <>\r\n            Table.Clear은 테이블을 초기화합니다. (이 기능은 테이블을 지우는것이 아닌 테이블을 재사용 하도록 하기 위해 만들어진겁니다.)\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Find',\r\n      path: '/table/table_find',\r\n      component: CreateThread({\r\n         title: 'Table.Find',\r\n         children: <>\r\n            Table.Find는 첫 번째 인자에서 받은 테이블에서 두 번째 인자를 찾습니다. <br/>\r\n            만약 있다면 아이템의 인덱스, 없다면 nil을 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Table.Foreach',\r\n      path: '/table/table_foreach',\r\n      component: CreateThread({\r\n         title: 'Table.Foreach',\r\n         children: <>\r\n            Table.Foreach는 첫 번째에 받은 테이블의 아이템을 각각 리턴합니다. <br/>\r\n            <Syntax>\r\n               {ForeachEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   }\r\n]\r\n\r\nexport default Table;","const ConcatEx =\r\n`local Mytable = {'Hello', 'World', '!'};\r\nprint(table.concat(Mytable, ' ')); -- 예상값: Hello World !`;\r\nconst InsertEx = \r\n`local Mytable = {'Hello', 'World'};\r\ntable.insert(Mytable, '!');\r\nprint(table.concat(Mytable, ' ')); -- 예상값: Hello World !`;\r\nconst MoveEx =\r\n`src = {\"a\", \"b\", \"c\", \"d\", \"e\"}\r\ndst = {\"v\", \"w\", \"x\", \"y\", \"z\"}\r\ntable.move(src, 2, 4, 1, dst)\r\nprint(table.concat(dst)) -- 예상값: bcdyz`;\r\nconst ForeachEx =\r\n`local Mytable = {'hi', 'hi2', 'hi3'};\r\ntable.foreach(Mytable, function(index, value)\r\n   print(index, value); -- 예상값: (각각) 1,2,3 hi,h2,h3\r\nend);`;\r\n\r\nconst KeyTableEx = \r\n`local Foods = {'Ramen', 'Pizza', 'Chicken'};`;\r\nconst IndexTableEx = \r\n`local Foods = {Ramen = 'Favorite', stinky_tofu = 'hate'};`;\r\n\r\nexport {\r\n   ConcatEx,\r\n   InsertEx,\r\n   MoveEx,\r\n   ForeachEx,\r\n   KeyTableEx,\r\n   IndexTableEx\r\n}","function LineBreak({value}: {value: string}) {\r\n   return (\r\n      <span dangerouslySetInnerHTML={{__html: value.replaceAll('\\n', '<br/>')}}>\r\n      </span>\r\n   )\r\n}\r\n\r\nexport default LineBreak;","const MetatableEx = \r\n`local Mytable = {};\r\nlocal Metatable = {};\r\n\r\nsetmetatable(Mytable, Metatable)`;\r\nconst Methods = [\r\n   [\r\n      '__index(table, index)',\r\n      '테이블[인덱스]가 nil일때 테이블[인덱스]가 불려졌을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__newindex(table, index, value)',\r\n      '테이블[인덱스]가 nil일때 테이블[인덱스]가 (테이블[인덱스] = 값) 의 형태로 불려질때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__call(table, ...)',\r\n      '테이블이 함수처럼 불려졌을때 발사됩니다. (...)은 인자를 의미합니다.'\r\n   ],\r\n   [\r\n      '__concat(table, value)',\r\n      '(..) 가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__add(table, value)',\r\n      '+ 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__sub(table, value)',\r\n      '- (마이너스) 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__mul(table, value)',\r\n      '* 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__div(table, value)',\r\n      '/ 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__mod(table, value)',\r\n      '% 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__pow(table, value)',\r\n      '^ (제곱) 오퍼레이터가 테이블에 사용됐을때 발사됩니다.'\r\n   ],\r\n   [\r\n      '__tostring(table)',\r\n      'tostring이 테이블에서 불려졌을때 발사됩니다.',\r\n   ],\r\n   [\r\n      '__eq(table, value)',\r\n      '== 오퍼레이터가 테이블에 사용됐을때 발사됩니다.',\r\n   ],\r\n   [\r\n      '__lt(table, value)',\r\n      '< 오퍼레이터가 테이블에 사용됐을때 발사됩니다. (>=, == 오퍼레이터는 이 메타메소드를 발사시킵니다.)'\r\n   ],\r\n   [\r\n      '__le(table, value)',\r\n      '<= 오퍼레이터가 테이블에 사용됐을때 발사됩니다. (> 오퍼레이터는 이 메타메소드를 발사시킵니다.)'\r\n   ],\r\n   [\r\n      '__mode',\r\n      '약한 테이블에 사용됩니다, - 테이블의 키나 값이 약한지 선언하는 - (Lua U의 인스턴스들은 절대로 약하지 않기 때문에 garbage는 수집되지 않습니다.)'\r\n   ],\r\n   [\r\n      '__len(table)',\r\n      '# 오퍼레이터가 오브젝트에 사용됐을때 발사됩니다. (Lua 5.1에선 유저데이터만이 이 메타메소드를 사용 할 수 있습니다.)'\r\n   ]\r\n]\r\nconst MetatableEx2 =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __index = function(Self, Index)\r\n      if (Index == 'Myname') then\r\n         return 'Real';\r\n      end\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable.Myname); -- 예상값: Real`;\r\nconst __newindexEx = \r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __newindex = function(Self, Index, Value)\r\n      print(Index, Value);\r\n\r\n      rawset(Self, Index, Value);\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nMytable.Myname = 'Real';`;\r\nconst __callEx = \r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __call = function(Self, name, age)\r\n      rawset(Self, name, age);\r\n   end\r\n}\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\n-- Mytable은 이제 함수처럼 부를 수 있는 상태가 됨.\r\nMytable('Real', 20);\r\n\r\nfor i,v in pairs (Mytable) do\r\n   print(i, v) -- 예상값: Real 20\r\nend`;\r\nconst __concatEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __concat = function(Self, value)\r\n      return string.format('Welcome, %s', value);\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nlocal String = Mytable .. 'Real';\r\nprint(String) -- 예상값: Welcome, Real`;\r\nconst __addEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __add = function(Self, value)\r\n      return 100 + value;\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable + 10); -- 예상값: 110`;\r\nconst __subEx = \r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __sub = function(Self, value)\r\n      return 100 - value;\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable - 10); -- 예상값: 90`;\r\nconst __mulEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __mul = function(Self, value)\r\n      return value * 2;\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable * 10); -- 예상값: 20`;\r\nconst __divEx = \r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __div = function(Self, value)\r\n      return 10 / value;\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable / 10); -- 예상값: 1`;\r\nconst __powEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __pow = function(Self, value)\r\n      return math.sqrt(value)\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable ^ 16); -- 예상값: 4`;\r\nconst __tostringEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __tostring = function(Self)\r\n      return \"tostring is not allowed\";\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\nprint(Mytable);`;\r\n\r\nconst garbageEx =\r\n`local t = 'hi !';\r\nt = nil;\r\n\r\nlocal hmm = {};\r\n\r\nt = nil;`;\r\nconst garbageEx2 =\r\n`local val = {};\r\nlocal t = {x = val};\r\n\r\nval = nil;\r\n\r\ncollectgarbage();\r\n\r\nfor i, v in pairs(t) do\r\n   print(v); -- 테이블이 나옴\r\nend`;\r\nconst garbageEx3 =\r\n`local FavoriteColors = {\r\n   'red', 'blue', 'green'\r\n};\r\nlocal Colors = {\r\n   FC = FavoriteColors\r\n}; -- FavoriteColors 라는 값을 참조 할 테이블이 존재.\r\n\r\nsetmetatable(Colors, {\r\n   __mode = 'v' -- 약한 값을 수집하도록 함.\r\n});\r\n\r\nFavoriteColors = nil;\r\n\r\ncollectgarbage() -- 콜렉터 실행.\r\n\r\nfor i,v in pairs (Colors) do\r\n   print(v); -- 테이블을 얻을 수 없음.\r\nend;`;\r\nconst rawgetEx =\r\n`local Mytable = {};\r\nlocal Mt = {\r\n   __index = function(Self, Index)\r\n      return rawget(Self, Index) or 'Could not be found';\r\n   end\r\n};\r\n\r\nsetmetatable(Mytable, Mt);\r\n\r\n`;\r\n\r\nexport {\r\n   MetatableEx,\r\n   MetatableEx2,\r\n   __newindexEx,\r\n   Methods,\r\n   __callEx,\r\n   __concatEx,\r\n   __addEx,\r\n   __subEx,\r\n   __mulEx,\r\n   __divEx,\r\n   __powEx,\r\n   __tostringEx,\r\n   garbageEx,\r\n   garbageEx2,\r\n   garbageEx3,\r\n   rawgetEx\r\n}","import { ReadyStage, Recommend, Basic, String, Table, Others, Metatable, Debug } from '../routes';\r\nimport { Threads } from '.';\r\n\r\ninterface TreeInterface {\r\n   [key: string]: Threads\r\n}\r\n\r\nexport const Tree: TreeInterface = {\r\n   Introduction: [\r\n      {name: 'Ready Stage', path: '/introduction/ready_stage', component: ReadyStage },\r\n      {name: 'Recommned', path: '/introduction/recommend', component: Recommend}\r\n   ],\r\n   Basic,\r\n   String,\r\n   Table,\r\n   Others,\r\n   Metatable,\r\n   Debug,\r\n}","import { Threads } from \"../../interface\";\r\nimport { CreateCustomThread } from \"../../library\";\r\n\r\nimport WarningText from \"../../component/WarningText\";\r\n\r\nconst CreateThread = CreateCustomThread({\r\n   onCreate: <>\r\n      <WarningText>\r\n         Lua U에 관련된 글 입니다. 여기에 관심이 없으신 분들은 다음 섹션으로 넘어가주세요.\r\n      </WarningText>\r\n      <div style={{marginBottom: '15px'}}></div>\r\n   </>\r\n})\r\n\r\nexport const Others: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/others/orientation',\r\n      component: CreateThread({\r\n         title: '이 섹션에선 나머지 종류의 기능들을 배워볼겁니다 ',\r\n         children: <>\r\n            준비중....\r\n         </>\r\n      })\r\n   }\r\n]","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport Syntax from \"../../component/Syntax\";\r\nimport WarningText from \"../../component/WarningText\";\r\nimport InfoText from \"../../component/InfoText\";\r\nimport LineBreak from \"../../component/Linebreak\";\r\nimport { \r\n   garbageEx, \r\n   garbageEx2, \r\n   MetatableEx, \r\n   MetatableEx2, \r\n   Methods, \r\n   __addEx, \r\n   __callEx, \r\n   __concatEx, \r\n   __divEx, \r\n   __mulEx, \r\n   __newindexEx, \r\n   __powEx, \r\n   __subEx, \r\n   __tostringEx, \r\n   garbageEx3, \r\n   rawgetEx\r\n} from \"../../lua/metatable\";\r\n\r\nexport const Metatable: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/mt/orientation',\r\n      component: CreateThread({\r\n         title: '메타테이블',\r\n         children: <>\r\n            <WarningText>\r\n               메타테이블은 루아에 기본적인 이해가 있어야합니다.\r\n            </WarningText>\r\n            메타테이블은 루아에서 매우 중요한 기능 중 하나입니다.\r\n            매우 유용하게 사용되며 루아를 하는데 없어서는 안돼는 기능입니다.\r\n            <Syntax>\r\n               {MetatableEx} \r\n            </Syntax>\r\n            \r\n            이렇게 하면 메타테이블이 만들어지며 getmetatable(x) 를 사용하면 메타테이블인지 확인 할 수 있습니다.<br/>\r\n            메타테이블에는 메타메소드라는 것이 있습니다. 이에 대해서는 차근차근 알아보고, 현재 Lua U에는 19개의 메타 메소드가 있습니다.<br/>\r\n            Lua U에서 사용 할 수 없는 메소드는 뺏습니다.<br/>\r\n            <InfoText>\r\n               대부분의 메타메소드는 첫 번째 인자에 메타테이블을 받습니다 (메타테이블이 된 테이블)\r\n            </InfoText>\r\n            <table style={{border: '1px solid rgb(50, 50, 50)', padding: '10px'}}>\r\n               <thead>\r\n                  <tr>\r\n                     <th colSpan={1}>이름</th>\r\n                     <th colSpan={3}>의미</th>\r\n                  </tr>\r\n               </thead>\r\n               <tbody>\r\n                  {Methods.map((Method, index) => {\r\n                     return <tr key={`lua-metamethods-${index}`}>\r\n                        <td>\r\n                           {Method[0]}\r\n                        </td>\r\n                        <td>\r\n                           {Method[1]}\r\n                        </td>\r\n                     </tr>\r\n                  })}\r\n               </tbody>\r\n            </table>\r\n            메타테이블은 문자열이나 숫자의 특성들을 테이블에서 사용 가능하게 해줍니다. 예를 들어\r\n            <Syntax>\r\n               {MetatableEx2}\r\n            </Syntax>\r\n            사실상 Myname이라는 값은 테이블 안에 존재하진 않지만 강제로 존재하는 것 처럼 할 수 있습니다. <br/>\r\n            여기까지가 맛보기였고 각 메타메소드에 관한 설명은 각 글에 가주세요. <br/>\r\n            <InfoText>키-값, 인덱스-값 테이블의 차이점을 모르시면 테이블 섹션으로 가주세요.</InfoText><br/>\r\n            <InfoText>각 메타메소드의 의미는 글에 나와있지 않습니다.</InfoText>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'getrawmetatable',\r\n      path: '/mt/getrawmetatable',\r\n      component: CreateThread({\r\n         title: 'Getrawmetatable',\r\n         children: <>\r\n            <Syntax>getmetatable (value)</Syntax>\r\n            value의 메타테이블을 리턴합니다. 만약 없다면, nil을 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'Rawset/Rawget/Rawequal',\r\n      path: '/mt/raws',\r\n      component: CreateThread({\r\n         title: 'Rawset / Rawget / Rawequal',\r\n         children: <>\r\n            제목에 있는 함수들의 공통점은 앞으로 배울 여러가지 메타 메소드를 발동시키지지 않고 발동됩니다.<br/>\r\n            <Syntax>\r\n               {__newindexEx}\r\n            </Syntax>\r\n\r\n            이 예시를 보면 rawset을 썻는데 만약 Self[Index] = Value 의 형식으로 값을 설정하면 __newindex가 무한반복 될것입니다.<br/>\r\n            이를 방지하기 위해서 raw 함수를 쓰는것입니다.<br/>\r\n            똑같이, \r\n            <Syntax>\r\n               {rawgetEx}\r\n            </Syntax>\r\n            여기서 우리가 Self[Index] 로 값을 리턴해주면 무한반복이 될것이다.\r\n         </>   \r\n      })\r\n   },\r\n   {\r\n      name: '__index',\r\n      path: '/mt/__index',\r\n      component: CreateThread({\r\n         title: '__index',\r\n         children: <>\r\n            <Syntax>\r\n               {MetatableEx2}\r\n            </Syntax>\r\n            <InfoText>예제 만들기 힘드네요.</InfoText>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__newindex',\r\n      path: '/mt/__newindex',\r\n      component: CreateThread({\r\n         title: '__newindex',\r\n         children: <>\r\n            __namecall은 앞에서 설명되어 있는것처럼 새로운 인덱스를 생성할때마다 발사됩니다. <br/>\r\n            <Syntax>\r\n               {__newindexEx}\r\n            </Syntax>\r\n            <LineBreak value={`이런식으로 코드를 작성하면 우리가 새로운 아이템을 테이블에 생성할때마다 인덱스와 값이 출력됩니다.\\n\r\n            `}/>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__call',\r\n      path: '/mt/__call',\r\n      component: CreateThread({\r\n         title: '__call',\r\n         children: <>\r\n            <Syntax>\r\n               {__callEx}\r\n            </Syntax>\r\n\r\n            <LineBreak value={`\r\n            위의 예시에서 나와있듯이, __call 메소드를 사용하면 테이블이 함수처럼 불렸을때 감지 할 수 있습니다.\r\n            당연하지만, 이것의 타입을 구하면 테이블로 나옵니다.\r\n            `} />\r\n             \r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__concat',\r\n      path: '/mt/__concat',\r\n      component: CreateThread({\r\n         title: '__concat',\r\n         children: <>\r\n            <Syntax>\r\n               {__concatEx}\r\n            </Syntax>\r\n            <WarningText>\r\n               __concat 메소드는 뒤에서 작용하는 연쇄에만 발동됩니다. ex) 'hi' .. Mytable (X) Mytable .. 'hi' (O)\r\n            </WarningText>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__add',\r\n      path: '/mt/__add',\r\n      component: CreateThread({\r\n         title: '__add',\r\n         children: <>\r\n            <Syntax>\r\n               {__addEx}\r\n            </Syntax>\r\n\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__sub',\r\n      path: '/mt/__sub',\r\n      component: CreateThread({\r\n         title: '__sub',\r\n         children: <>\r\n            <Syntax>\r\n               {__subEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__mul',\r\n      path: '/mt/__mul',\r\n      component: CreateThread({\r\n         title: '__mul',\r\n         children: <>\r\n            <Syntax>\r\n               {__mulEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__div',\r\n      path: '/mt/__div',\r\n      component: CreateThread({\r\n         title: '__div',\r\n         children: <>\r\n            <Syntax>\r\n               {__divEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__mod',\r\n      path: '/mt/__mod',\r\n      component: CreateThread({\r\n         title: '__mod',\r\n         children: <>\r\n            추가될 예정\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__pow',\r\n      path: '/mt/__pow',\r\n      component: CreateThread({\r\n         title: '__pow',\r\n         children: <>\r\n            <Syntax>\r\n               {__powEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__tostring',\r\n      path: '/mt/__tostring',\r\n      component: CreateThread({\r\n         title: '__tostring',\r\n         children: <>\r\n            <Syntax>\r\n               {__tostringEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: '__mode / Weak Table',\r\n      path: '/mt/__mode',\r\n      component: CreateThread({\r\n         title: '__mode / Weak Table',\r\n         children: <>\r\n            먼저 이 __mode와 Weak Table에 대해 말하기 전에, 잠시 다른 이야기를 해봅시다.\r\n            <Syntax>\r\n               {garbageEx}\r\n            </Syntax>\r\n            여기에 두 t와 hmm 이라는 변수가 있습니다. 우리는 방금 이들을 nil로 설정하면서 그것의 원래 값을 없앴습니다.<br/>\r\n            우리의 프로그램 상에서는 저 변수들의 원래 값은 얻을 수 없지만, 메모리 상에는 여전히 존재합니다.<br/>\r\n            Lua u에서는 비활성화 됐지만 바닐라 루아에는 collectgarbage라는 함수가 있습니다.<br/><br/>\r\n            루아에서는 테이블, 함수, 유저 데이터, 문자열 등의 것들이 더이상 도달 할 수 없는 (이러한 것들에 대해 참조할 것이 없을때) 쓰레기 라고 여깁니다.<br/>\r\n            루아 쓰레기 콜렉터는 주기적으로 작동되지만 우리는 collectgarbage를 이용해 수동적으로 할 수 있습니다. <br/><br/>\r\n            위의 예제는 더이상 기술적으로 도달 할 수 없기 때문에 쓰레기로 여겨지는겁니다.\r\n            <Syntax>\r\n               {garbageEx2}\r\n            </Syntax>\r\n            하지만 우리는 여기서 collectgarbage에 의해 val 이라는 테이블이 콜렉트 될거라고 예상하지만 val은 메모리나 프로그램 자체에서도 사라지지 않았습니다.<br/>\r\n            val은 아직 x라는 테이블 안에 존재하기 때문에 삭제되지 않은것입니다. <br/>\r\n            이때 이걸 막기 위해 사용하는것이 __mode 라는 메타메소드 입니다.\r\n            <Syntax>\r\n               {garbageEx3}\r\n            </Syntax>\r\n            약한 테이블은 약한 키나, 약한 값을 가지고 있는 테이블을 의미합니다. 2 번째 예시를 보면 알수 있듯이, val은 약한 값이고 t는 약한 테이블이 된것입니다. <br/>\r\n         </>  \r\n      })\r\n   }\r\n];","import { Threads } from \"../../interface\";\r\nimport { CreateThread } from \"../../library\";\r\nimport Syntax from \"../../component/Syntax\";\r\nimport WarningText from \"../../component/WarningText\";\r\nimport InfoText from \"../../component/InfoText\";\r\nimport { getinfoEx, upvalueEx } from \"../../lua/debug\";\r\n\r\nexport const Debug: Threads = [\r\n   {\r\n      name: 'Orientation',\r\n      path: '/debug/or',\r\n      component: CreateThread({\r\n         title: '디버그',\r\n         children: <>\r\n            <WarningText>\r\n               디버그 기능들중 대부분은 Lua U에서 사용 할 수 없습니다.\r\n            </WarningText>\r\n            거의 끝났네요 !\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'debug.getinfo',\r\n      path: '/debug/debug-getinfo',\r\n      component: CreateThread({\r\n         title: 'Debug.Getinfo',\r\n         children: <>\r\n            <Syntax>debug.getinfo ([thread,] f [, what])</Syntax>\r\n            debug.getinfo는 f에서 받은 함수에 대한 정보를 담은 테이블을 리턴합니다.<br/>\r\n            여러분들은 함수를 직접적으로 줄수도 있고, 숫자의 형태로도 줄 수 있습니다. 만약 숫자가 활동중인 함수의 숫자보다 크면 에러를 리턴합니다.\r\n            <br/>\r\n            <InfoText>\r\n               print에 대한 정보\r\n            </InfoText>\r\n            <Syntax>\r\n               {getinfoEx}\r\n            </Syntax>\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'debug.getlocal',\r\n      path: '/debug/debug-getlocal',\r\n      component: CreateThread({\r\n         title: 'Debug.Getlocal',\r\n         children: <>\r\n            <Syntax>debug.getlocal ([thread,] f, local)</Syntax>\r\n            debug.getlocal는 f의 지역변수의 이름과 값을 리턴합니다. 이 함수는 노출된 지역변수에만 접근하는것이 아닌, 파라메터, 일시적 값 또한 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'debug.setlocal',\r\n      path: '/debug/set-local',\r\n      component: CreateThread({\r\n         title: 'Debug.Setlocal',\r\n         children: <>\r\n            <Syntax>debug.setlocal ([thread,] level, local, value)</Syntax>\r\n            이 함수는 value를 함수 레벨의 인덱스 local의 지역변수에 할당시킵니다. 만약 주어진 인덱스에 지역변수가 없다면 에러를 리턴합니다. <br/>\r\n            있다면, 지역변수의 이름을 리턴합니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'debug.getupvalue',\r\n      path: '/debug/debug-getupvalue',\r\n      component: CreateThread({\r\n         title: 'Debug.Getupvalue',\r\n         children: <>\r\n            <InfoText>편의를 위해 upvalue를 upv로 설명하겠습니다.</InfoText> <br/>\r\n            <Syntax>debug.getupvalue (f, upv)</Syntax>\r\n            이 함수에 대해 알아보기 전에, 우리는 upv 뭔지 알아야합니다. <br/>\r\n            루아 함수에선, upv는 함수가 사용한 외부적 지역변수와 이것의 클로저에 지속적으로 포함되어있는 외부적 지역변수를 의미합니다. <br/>\r\n            이 함수는 함수 f의 인덱스 upv 에 대한 이름과 값을 리턴합니다. 만약 주어진 인덱스에 upv이 없다면 에러를 리턴합니다.\r\n            <Syntax>\r\n               {upvalueEx}\r\n            </Syntax>\r\n            upv은 변수가 함수에서 불려진 순서에 따라 결정됩니다.\r\n         </>\r\n      })\r\n   },\r\n   {\r\n      name: 'debug.setupvalue',\r\n      path: '/debug/debug-setupvalue',\r\n      component: CreateThread({\r\n         title: 'Debug.Setupvalue',\r\n         children: <>\r\n            <Syntax>debug.setupvalue (f, upv, value)</Syntax>\r\n            이 함수는 value를 upvalue에 함수 f의 인덱스 upv와 할당시킵니다. 이 함수는 만약 주어진 인덱스에 값이 없으면 에러를 리턴하고, 있다면 upvalue의 이름을 리턴합니다.\r\n         </>\r\n      })\r\n   }\r\n];\r\n\r\n","const upvalueEx =\r\n`local Myname = 'Real';\r\n\r\nfunction printName()\r\n   print(Myname);\r\nend\r\n\r\nprint(debug.getupvalue(printName, 1)); -- 에상값: Real`;\r\nconst getinfoEx =\r\n`Index: source  Value: =[C]\r\nIndex: what  Value: C\r\nIndex: numparams  Value: 0\r\nIndex: func  Value: function: 0x00000000159709c3\r\nIndex: short_src  Value: [C]\r\nIndex: currentline  Value: -1\r\nIndex: name  Value: \r\nIndex: is_vararg  Value: 1\r\nIndex: nups  Value: 1`;\r\n\r\nexport {\r\n   upvalueEx,\r\n   getinfoEx\r\n}","import React, { Component } from 'react';\r\nimport { Divider, Button } from './';\r\nimport { Threads, Tree } from '../interface';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport InfoText from './InfoText';\r\nimport LinkButton from './LinkButton';\r\n\r\ninterface SidebarState {\r\n   [key: string]: boolean | string | Array<any>,\r\n   RemappedTree: Array<{\r\n      section: string,\r\n      threads: Threads\r\n   }>,\r\n   FilteredItems: Array<{section: string, threads: Threads}>,\r\n   inputContent: string\r\n}\r\n\r\nclass Sidebar extends Component<RouteComponentProps, SidebarState> {\r\n   state: SidebarState = {\r\n      RemappedTree: (() => {\r\n         const Result: Array<{\r\n            section: string,\r\n            threads: Threads\r\n         }> = [];\r\n\r\n         Object.keys(Tree).forEach(key => {\r\n            Result.push({\r\n               section: key,\r\n               threads: Tree[key]\r\n            })\r\n         })\r\n\r\n         return Result;\r\n      })(),\r\n      FilteredItems: [],\r\n      inputContent: ''\r\n   }\r\n\r\n   constructor(props: any) {\r\n      super(props);\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n   }\r\n\r\n   componentDidMount() {\r\n      Object.keys(Tree).forEach(key => {\r\n         this.setState({\r\n            [key]: true,\r\n         });\r\n         \r\n      })\r\n   }\r\n\r\n   resetFilteredItems() {\r\n      this.setState({\r\n         FilteredItems: []\r\n      });\r\n   }\r\n\r\n   handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n      const { target: { value }} = event;\r\n\r\n      if (value.trim() === \"\") {\r\n         return this.resetFilteredItems();\r\n      }\r\n\r\n      // find matched section / thread in object.\r\n      const FilteredKeywords = this.state.RemappedTree.map(data => {\r\n         const Keyword = data.threads.filter(item => item.name.toLowerCase().includes(value.toLocaleLowerCase()));\r\n\r\n         return {\r\n            section: data.section,\r\n            threads: Keyword\r\n         }\r\n      });\r\n\r\n      this.setState({\r\n         FilteredItems: FilteredKeywords\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div id='lua-sidebar'>\r\n            <h3 style={{cursor: 'pointer'}} onClick={() => this.props.history.replace('/')}>\r\n               Lua.Org Remaster\r\n            </h3>\r\n            <div id='lua-sidebar-body' style={{paddingLeft: '10px', paddingRight: '10px'}}>\r\n               \r\n               <Divider margin Direction='horizontal'/>\r\n\r\n               {/* Find Threads */}\r\n               <input type='text' placeholder='Find Thread' className='lua-Inputbase text' onChange={this.handleChange} />\r\n               <Divider Direction='horizontal' />\r\n\r\n               {/* search */}\r\n               <div className='lua-serach' >\r\n                  {this.state.FilteredItems.length !== 0 && \r\n                     this.state.FilteredItems.map((data, index) => {\r\n                        if (data.threads.length < 1) return null;\r\n\r\n                        return (\r\n                           <div key={`lua-sidebar-search-${index}`} style={{textAlign: 'center'}} className='lua-Inputbase button' onClick={() => {\r\n                              if (data.threads.length === 1) {\r\n                                 this.props.history.push(data.threads[0].path);\r\n                              }\r\n                           }}>\r\n                              {data.section}\r\n                              <br/>\r\n                              {data.threads.map((thread, index) => {\r\n                                 return <LinkButton key={`lua-sidebar-search-child-${index}`} path={thread.path}><InfoText>{thread.name}</InfoText></LinkButton>\r\n                              })}\r\n                           </div>\r\n                        )\r\n                     }) \r\n                  }\r\n               </div>\r\n\r\n\r\n               <ul className='lua-list'>\r\n\r\n                  {Object.keys(Tree).map((key, index) => {\r\n                     const TreeData = Tree[key];\r\n                     // Dropdown\r\n                     let TreeItemDiv = (\r\n                        <div className={`lua-list background`} id={`lua-sidebar-list-${index}`}>\r\n                           {TreeData.map((Data, index) => {\r\n                              return <Button key={`lua-treedata-${index}`} onClick={() => {\r\n                                 this.props.history.replace(Data.path || '/');\r\n                              }}>\r\n                                 {Data.name}\r\n                              </Button>\r\n                           })}\r\n                        </div>\r\n                     )\r\n\r\n                     let UpdateList = () => {\r\n                        this.setState(current => ({\r\n                           [key]: !current[key],\r\n                        }))\r\n                        const list = document.getElementById(`lua-sidebar-list-${index}`);\r\n                        if (list) {\r\n                           if (!this.state[key]) {\r\n                              list.style.height = '0px';\r\n                              list.style.padding = '0px';\r\n                              list.style.overflow = 'hidden';\r\n                           } else {\r\n                              list.style.height = `${list.scrollHeight}px`;\r\n                              list.style.padding = '7px';\r\n                              list.style.overflow = 'auto';\r\n                           }\r\n                        }\r\n                     }\r\n                     \r\n                     return (\r\n                        <li className={`lua-listitem-container ${!this.state[key] ? 'active' : ''}`} key={`lua-listitem-${index}`}>\r\n                           <Button onClick={() => {\r\n                              if (TreeData.length === 0) return;\r\n                              UpdateList();\r\n                           }}>\r\n                              {key}\r\n                           </Button>\r\n                           {TreeItemDiv}\r\n                        </li>\r\n                     )\r\n                  })}\r\n               </ul>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default withRouter(Sidebar);","import React from \"react\";\r\n\r\nconst Container = ({children}: {children:any}) => {\r\n   return <div className='lua-container'>\r\n      {children}\r\n   </div>\r\n}\r\n\r\nexport default Container ;","// hm\r\n\r\nfunction SmallText({children}: {children: any}) {\r\n   return <span className='lua-small'>\r\n      {children}\r\n   </span>\r\n}\r\n\r\nexport default SmallText;","import React from \"react\";\r\n\r\nfunction Divider({margin, Direction, style}: {margin?: boolean, Direction: 'horizontal' | 'vertical', style?: React.CSSProperties}) {\r\n   return <div className={`lua-divider ${Direction} ${margin && 'margin'}`} style={style}>\r\n\r\n   </div>\r\n}\r\n\r\nexport default Divider;","import React, { Component } from \"react\";\r\nimport { Button } from \".\";\r\n\r\n\r\nclass Topbar extends Component {\r\n   state = {\r\n      width: window.innerWidth,\r\n      SideActive: false,\r\n   }\r\n\r\n   componentDidMount() {\r\n      window.addEventListener('resize', () => {\r\n         this.setState({\r\n            width: window.innerWidth\r\n         })\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <nav>\r\n            <div className='lua-topbar'>\r\n               {this.state.width <= 600 && (\r\n                  <div style={{padding: '3px'}}>\r\n                     <Button onClick={() => {\r\n                        this.setState({\r\n                           SideActive: !this.state.SideActive\r\n                        });\r\n\r\n                        const Sidebar = document.getElementById('lua-sidebar');\r\n\r\n                        if (Sidebar) {\r\n                           if (this.state.SideActive) {\r\n                              Sidebar.style.width = `${window.innerWidth - 50}px`;\r\n                           } else {\r\n                              Sidebar.style.width = '0px';\r\n                           }\r\n                        }\r\n                     }}>\r\n                        =\r\n                     </Button>\r\n                  </div>\r\n               )}\r\n               <h3>Lua.Org Remaster</h3>\r\n            </div>\r\n         </nav>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default Topbar;","import React from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { Sidebar, Topbar } from './component';\nimport { Tree } from './interface';\nimport { Home } from './routes';\n\nconst RemappedTree: Array<{name: string, component: any, path: string}> = [];\n\nObject.keys(Tree).forEach(key => {\n  const TreeData = Tree[key];\n\n  TreeData.forEach(data => {\n    RemappedTree.push(data);\n  });\n});\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Sidebar />\n      <div className='lua-wrapper'>\n        <Topbar />\n        <Route component={Home} path='/' exact />\n        {RemappedTree.map((data, index) => {\n          return <Route key={`route-element-${index}`} component={data.component} path={data.path}  />\n        })}\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nwindow.onload = () => {\n  // Alert container init  \n  const AlertContainer = document.createElement('div');\n  AlertContainer.classList.add('lua-alert');\n  AlertContainer.id = 'lua-alert-container';\n\n  document.getElementById('root')?.append(AlertContainer);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}